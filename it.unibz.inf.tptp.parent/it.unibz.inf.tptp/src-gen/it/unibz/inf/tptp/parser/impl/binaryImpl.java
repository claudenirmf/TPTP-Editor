/**
 * generated by Xtext 2.12.0
 */
package it.unibz.inf.tptp.parser.impl;

import it.unibz.inf.tptp.parser.ParserPackage;
import it.unibz.inf.tptp.parser.binary;
import it.unibz.inf.tptp.parser.tff_atom;
import it.unibz.inf.tptp.parser.tff_expression;
import it.unibz.inf.tptp.parser.thf_atom;
import it.unibz.inf.tptp.parser.thf_expression;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>binary</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link it.unibz.inf.tptp.parser.impl.binaryImpl#getAtom <em>Atom</em>}</li>
 *   <li>{@link it.unibz.inf.tptp.parser.impl.binaryImpl#isNegation <em>Negation</em>}</li>
 *   <li>{@link it.unibz.inf.tptp.parser.impl.binaryImpl#getExp <em>Exp</em>}</li>
 *   <li>{@link it.unibz.inf.tptp.parser.impl.binaryImpl#getQuantifier <em>Quantifier</em>}</li>
 *   <li>{@link it.unibz.inf.tptp.parser.impl.binaryImpl#getParam <em>Param</em>}</li>
 *   <li>{@link it.unibz.inf.tptp.parser.impl.binaryImpl#getThf_atom <em>Thf atom</em>}</li>
 *   <li>{@link it.unibz.inf.tptp.parser.impl.binaryImpl#isThf_negation <em>Thf negation</em>}</li>
 *   <li>{@link it.unibz.inf.tptp.parser.impl.binaryImpl#getThf_exp <em>Thf exp</em>}</li>
 *   <li>{@link it.unibz.inf.tptp.parser.impl.binaryImpl#getOp <em>Op</em>}</li>
 *   <li>{@link it.unibz.inf.tptp.parser.impl.binaryImpl#getLeft <em>Left</em>}</li>
 *   <li>{@link it.unibz.inf.tptp.parser.impl.binaryImpl#getRight <em>Right</em>}</li>
 * </ul>
 *
 * @generated
 */
public class binaryImpl extends fof_expressionImpl implements binary
{
  /**
   * The cached value of the '{@link #getAtom() <em>Atom</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAtom()
   * @generated
   * @ordered
   */
  protected tff_atom atom;

  /**
   * The default value of the '{@link #isNegation() <em>Negation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNegation()
   * @generated
   * @ordered
   */
  protected static final boolean NEGATION_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isNegation() <em>Negation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNegation()
   * @generated
   * @ordered
   */
  protected boolean negation = NEGATION_EDEFAULT;

  /**
   * The cached value of the '{@link #getExp() <em>Exp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExp()
   * @generated
   * @ordered
   */
  protected EObject exp;

  /**
   * The default value of the '{@link #getQuantifier() <em>Quantifier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQuantifier()
   * @generated
   * @ordered
   */
  protected static final String QUANTIFIER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getQuantifier() <em>Quantifier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQuantifier()
   * @generated
   * @ordered
   */
  protected String quantifier = QUANTIFIER_EDEFAULT;

  /**
   * The cached value of the '{@link #getParam() <em>Param</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParam()
   * @generated
   * @ordered
   */
  protected EObject param;

  /**
   * The cached value of the '{@link #getThf_atom() <em>Thf atom</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getThf_atom()
   * @generated
   * @ordered
   */
  protected thf_atom thf_atom;

  /**
   * The default value of the '{@link #isThf_negation() <em>Thf negation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isThf_negation()
   * @generated
   * @ordered
   */
  protected static final boolean THF_NEGATION_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isThf_negation() <em>Thf negation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isThf_negation()
   * @generated
   * @ordered
   */
  protected boolean thf_negation = THF_NEGATION_EDEFAULT;

  /**
   * The cached value of the '{@link #getThf_exp() <em>Thf exp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getThf_exp()
   * @generated
   * @ordered
   */
  protected EObject thf_exp;

  /**
   * The default value of the '{@link #getOp() <em>Op</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOp()
   * @generated
   * @ordered
   */
  protected static final String OP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOp() <em>Op</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOp()
   * @generated
   * @ordered
   */
  protected String op = OP_EDEFAULT;

  /**
   * The cached value of the '{@link #getLeft() <em>Left</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeft()
   * @generated
   * @ordered
   */
  protected EObject left;

  /**
   * The cached value of the '{@link #getRight() <em>Right</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRight()
   * @generated
   * @ordered
   */
  protected EObject right;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected binaryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ParserPackage.Literals.BINARY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public tff_atom getAtom()
  {
    return atom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAtom(tff_atom newAtom, NotificationChain msgs)
  {
    tff_atom oldAtom = atom;
    atom = newAtom;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ParserPackage.BINARY__ATOM, oldAtom, newAtom);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAtom(tff_atom newAtom)
  {
    if (newAtom != atom)
    {
      NotificationChain msgs = null;
      if (atom != null)
        msgs = ((InternalEObject)atom).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ParserPackage.BINARY__ATOM, null, msgs);
      if (newAtom != null)
        msgs = ((InternalEObject)newAtom).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ParserPackage.BINARY__ATOM, null, msgs);
      msgs = basicSetAtom(newAtom, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ParserPackage.BINARY__ATOM, newAtom, newAtom));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isNegation()
  {
    return negation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNegation(boolean newNegation)
  {
    boolean oldNegation = negation;
    negation = newNegation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ParserPackage.BINARY__NEGATION, oldNegation, negation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EObject getExp()
  {
    return exp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExp(EObject newExp, NotificationChain msgs)
  {
    EObject oldExp = exp;
    exp = newExp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ParserPackage.BINARY__EXP, oldExp, newExp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExp(EObject newExp)
  {
    if (newExp != exp)
    {
      NotificationChain msgs = null;
      if (exp != null)
        msgs = ((InternalEObject)exp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ParserPackage.BINARY__EXP, null, msgs);
      if (newExp != null)
        msgs = ((InternalEObject)newExp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ParserPackage.BINARY__EXP, null, msgs);
      msgs = basicSetExp(newExp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ParserPackage.BINARY__EXP, newExp, newExp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getQuantifier()
  {
    return quantifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setQuantifier(String newQuantifier)
  {
    String oldQuantifier = quantifier;
    quantifier = newQuantifier;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ParserPackage.BINARY__QUANTIFIER, oldQuantifier, quantifier));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EObject getParam()
  {
    return param;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetParam(EObject newParam, NotificationChain msgs)
  {
    EObject oldParam = param;
    param = newParam;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ParserPackage.BINARY__PARAM, oldParam, newParam);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParam(EObject newParam)
  {
    if (newParam != param)
    {
      NotificationChain msgs = null;
      if (param != null)
        msgs = ((InternalEObject)param).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ParserPackage.BINARY__PARAM, null, msgs);
      if (newParam != null)
        msgs = ((InternalEObject)newParam).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ParserPackage.BINARY__PARAM, null, msgs);
      msgs = basicSetParam(newParam, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ParserPackage.BINARY__PARAM, newParam, newParam));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public thf_atom getThf_atom()
  {
    return thf_atom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetThf_atom(thf_atom newThf_atom, NotificationChain msgs)
  {
    thf_atom oldThf_atom = thf_atom;
    thf_atom = newThf_atom;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ParserPackage.BINARY__THF_ATOM, oldThf_atom, newThf_atom);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setThf_atom(thf_atom newThf_atom)
  {
    if (newThf_atom != thf_atom)
    {
      NotificationChain msgs = null;
      if (thf_atom != null)
        msgs = ((InternalEObject)thf_atom).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ParserPackage.BINARY__THF_ATOM, null, msgs);
      if (newThf_atom != null)
        msgs = ((InternalEObject)newThf_atom).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ParserPackage.BINARY__THF_ATOM, null, msgs);
      msgs = basicSetThf_atom(newThf_atom, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ParserPackage.BINARY__THF_ATOM, newThf_atom, newThf_atom));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isThf_negation()
  {
    return thf_negation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setThf_negation(boolean newThf_negation)
  {
    boolean oldThf_negation = thf_negation;
    thf_negation = newThf_negation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ParserPackage.BINARY__THF_NEGATION, oldThf_negation, thf_negation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EObject getThf_exp()
  {
    return thf_exp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetThf_exp(EObject newThf_exp, NotificationChain msgs)
  {
    EObject oldThf_exp = thf_exp;
    thf_exp = newThf_exp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ParserPackage.BINARY__THF_EXP, oldThf_exp, newThf_exp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setThf_exp(EObject newThf_exp)
  {
    if (newThf_exp != thf_exp)
    {
      NotificationChain msgs = null;
      if (thf_exp != null)
        msgs = ((InternalEObject)thf_exp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ParserPackage.BINARY__THF_EXP, null, msgs);
      if (newThf_exp != null)
        msgs = ((InternalEObject)newThf_exp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ParserPackage.BINARY__THF_EXP, null, msgs);
      msgs = basicSetThf_exp(newThf_exp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ParserPackage.BINARY__THF_EXP, newThf_exp, newThf_exp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getOp()
  {
    return op;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOp(String newOp)
  {
    String oldOp = op;
    op = newOp;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ParserPackage.BINARY__OP, oldOp, op));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EObject getLeft()
  {
    return left;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLeft(EObject newLeft, NotificationChain msgs)
  {
    EObject oldLeft = left;
    left = newLeft;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ParserPackage.BINARY__LEFT, oldLeft, newLeft);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLeft(EObject newLeft)
  {
    if (newLeft != left)
    {
      NotificationChain msgs = null;
      if (left != null)
        msgs = ((InternalEObject)left).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ParserPackage.BINARY__LEFT, null, msgs);
      if (newLeft != null)
        msgs = ((InternalEObject)newLeft).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ParserPackage.BINARY__LEFT, null, msgs);
      msgs = basicSetLeft(newLeft, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ParserPackage.BINARY__LEFT, newLeft, newLeft));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EObject getRight()
  {
    return right;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRight(EObject newRight, NotificationChain msgs)
  {
    EObject oldRight = right;
    right = newRight;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ParserPackage.BINARY__RIGHT, oldRight, newRight);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRight(EObject newRight)
  {
    if (newRight != right)
    {
      NotificationChain msgs = null;
      if (right != null)
        msgs = ((InternalEObject)right).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ParserPackage.BINARY__RIGHT, null, msgs);
      if (newRight != null)
        msgs = ((InternalEObject)newRight).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ParserPackage.BINARY__RIGHT, null, msgs);
      msgs = basicSetRight(newRight, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ParserPackage.BINARY__RIGHT, newRight, newRight));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ParserPackage.BINARY__ATOM:
        return basicSetAtom(null, msgs);
      case ParserPackage.BINARY__EXP:
        return basicSetExp(null, msgs);
      case ParserPackage.BINARY__PARAM:
        return basicSetParam(null, msgs);
      case ParserPackage.BINARY__THF_ATOM:
        return basicSetThf_atom(null, msgs);
      case ParserPackage.BINARY__THF_EXP:
        return basicSetThf_exp(null, msgs);
      case ParserPackage.BINARY__LEFT:
        return basicSetLeft(null, msgs);
      case ParserPackage.BINARY__RIGHT:
        return basicSetRight(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ParserPackage.BINARY__ATOM:
        return getAtom();
      case ParserPackage.BINARY__NEGATION:
        return isNegation();
      case ParserPackage.BINARY__EXP:
        return getExp();
      case ParserPackage.BINARY__QUANTIFIER:
        return getQuantifier();
      case ParserPackage.BINARY__PARAM:
        return getParam();
      case ParserPackage.BINARY__THF_ATOM:
        return getThf_atom();
      case ParserPackage.BINARY__THF_NEGATION:
        return isThf_negation();
      case ParserPackage.BINARY__THF_EXP:
        return getThf_exp();
      case ParserPackage.BINARY__OP:
        return getOp();
      case ParserPackage.BINARY__LEFT:
        return getLeft();
      case ParserPackage.BINARY__RIGHT:
        return getRight();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ParserPackage.BINARY__ATOM:
        setAtom((tff_atom)newValue);
        return;
      case ParserPackage.BINARY__NEGATION:
        setNegation((Boolean)newValue);
        return;
      case ParserPackage.BINARY__EXP:
        setExp((EObject)newValue);
        return;
      case ParserPackage.BINARY__QUANTIFIER:
        setQuantifier((String)newValue);
        return;
      case ParserPackage.BINARY__PARAM:
        setParam((EObject)newValue);
        return;
      case ParserPackage.BINARY__THF_ATOM:
        setThf_atom((thf_atom)newValue);
        return;
      case ParserPackage.BINARY__THF_NEGATION:
        setThf_negation((Boolean)newValue);
        return;
      case ParserPackage.BINARY__THF_EXP:
        setThf_exp((EObject)newValue);
        return;
      case ParserPackage.BINARY__OP:
        setOp((String)newValue);
        return;
      case ParserPackage.BINARY__LEFT:
        setLeft((EObject)newValue);
        return;
      case ParserPackage.BINARY__RIGHT:
        setRight((EObject)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ParserPackage.BINARY__ATOM:
        setAtom((tff_atom)null);
        return;
      case ParserPackage.BINARY__NEGATION:
        setNegation(NEGATION_EDEFAULT);
        return;
      case ParserPackage.BINARY__EXP:
        setExp((EObject)null);
        return;
      case ParserPackage.BINARY__QUANTIFIER:
        setQuantifier(QUANTIFIER_EDEFAULT);
        return;
      case ParserPackage.BINARY__PARAM:
        setParam((EObject)null);
        return;
      case ParserPackage.BINARY__THF_ATOM:
        setThf_atom((thf_atom)null);
        return;
      case ParserPackage.BINARY__THF_NEGATION:
        setThf_negation(THF_NEGATION_EDEFAULT);
        return;
      case ParserPackage.BINARY__THF_EXP:
        setThf_exp((EObject)null);
        return;
      case ParserPackage.BINARY__OP:
        setOp(OP_EDEFAULT);
        return;
      case ParserPackage.BINARY__LEFT:
        setLeft((EObject)null);
        return;
      case ParserPackage.BINARY__RIGHT:
        setRight((EObject)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ParserPackage.BINARY__ATOM:
        return atom != null;
      case ParserPackage.BINARY__NEGATION:
        return negation != NEGATION_EDEFAULT;
      case ParserPackage.BINARY__EXP:
        return exp != null;
      case ParserPackage.BINARY__QUANTIFIER:
        return QUANTIFIER_EDEFAULT == null ? quantifier != null : !QUANTIFIER_EDEFAULT.equals(quantifier);
      case ParserPackage.BINARY__PARAM:
        return param != null;
      case ParserPackage.BINARY__THF_ATOM:
        return thf_atom != null;
      case ParserPackage.BINARY__THF_NEGATION:
        return thf_negation != THF_NEGATION_EDEFAULT;
      case ParserPackage.BINARY__THF_EXP:
        return thf_exp != null;
      case ParserPackage.BINARY__OP:
        return OP_EDEFAULT == null ? op != null : !OP_EDEFAULT.equals(op);
      case ParserPackage.BINARY__LEFT:
        return left != null;
      case ParserPackage.BINARY__RIGHT:
        return right != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eBaseStructuralFeatureID(int derivedFeatureID, Class<?> baseClass)
  {
    if (baseClass == tff_expression.class)
    {
      switch (derivedFeatureID)
      {
        case ParserPackage.BINARY__ATOM: return ParserPackage.TFF_EXPRESSION__ATOM;
        case ParserPackage.BINARY__NEGATION: return ParserPackage.TFF_EXPRESSION__NEGATION;
        case ParserPackage.BINARY__EXP: return ParserPackage.TFF_EXPRESSION__EXP;
        case ParserPackage.BINARY__QUANTIFIER: return ParserPackage.TFF_EXPRESSION__QUANTIFIER;
        case ParserPackage.BINARY__PARAM: return ParserPackage.TFF_EXPRESSION__PARAM;
        default: return -1;
      }
    }
    if (baseClass == thf_expression.class)
    {
      switch (derivedFeatureID)
      {
        case ParserPackage.BINARY__THF_ATOM: return ParserPackage.THF_EXPRESSION__THF_ATOM;
        case ParserPackage.BINARY__THF_NEGATION: return ParserPackage.THF_EXPRESSION__THF_NEGATION;
        case ParserPackage.BINARY__THF_EXP: return ParserPackage.THF_EXPRESSION__THF_EXP;
        case ParserPackage.BINARY__OP: return ParserPackage.THF_EXPRESSION__OP;
        default: return -1;
      }
    }
    return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eDerivedStructuralFeatureID(int baseFeatureID, Class<?> baseClass)
  {
    if (baseClass == tff_expression.class)
    {
      switch (baseFeatureID)
      {
        case ParserPackage.TFF_EXPRESSION__ATOM: return ParserPackage.BINARY__ATOM;
        case ParserPackage.TFF_EXPRESSION__NEGATION: return ParserPackage.BINARY__NEGATION;
        case ParserPackage.TFF_EXPRESSION__EXP: return ParserPackage.BINARY__EXP;
        case ParserPackage.TFF_EXPRESSION__QUANTIFIER: return ParserPackage.BINARY__QUANTIFIER;
        case ParserPackage.TFF_EXPRESSION__PARAM: return ParserPackage.BINARY__PARAM;
        default: return -1;
      }
    }
    if (baseClass == thf_expression.class)
    {
      switch (baseFeatureID)
      {
        case ParserPackage.THF_EXPRESSION__THF_ATOM: return ParserPackage.BINARY__THF_ATOM;
        case ParserPackage.THF_EXPRESSION__THF_NEGATION: return ParserPackage.BINARY__THF_NEGATION;
        case ParserPackage.THF_EXPRESSION__THF_EXP: return ParserPackage.BINARY__THF_EXP;
        case ParserPackage.THF_EXPRESSION__OP: return ParserPackage.BINARY__OP;
        default: return -1;
      }
    }
    return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (negation: ");
    result.append(negation);
    result.append(", quantifier: ");
    result.append(quantifier);
    result.append(", thf_negation: ");
    result.append(thf_negation);
    result.append(", op: ");
    result.append(op);
    result.append(')');
    return result.toString();
  }

} //binaryImpl
