/**
 * generated by Xtext 2.12.0
 */
package it.unibz.inf.tptp.parser.util;

import it.unibz.inf.tptp.parser.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see it.unibz.inf.tptp.parser.ParserPackage
 * @generated
 */
public class ParserAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static ParserPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ParserAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = ParserPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ParserSwitch<Adapter> modelSwitch =
    new ParserSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseinclude(include object)
      {
        return createincludeAdapter();
      }
      @Override
      public Adapter casefof_input(fof_input object)
      {
        return createfof_inputAdapter();
      }
      @Override
      public Adapter casefof_root(fof_root object)
      {
        return createfof_rootAdapter();
      }
      @Override
      public Adapter casefof_expression(fof_expression object)
      {
        return createfof_expressionAdapter();
      }
      @Override
      public Adapter casefof_atom(fof_atom object)
      {
        return createfof_atomAdapter();
      }
      @Override
      public Adapter casefof_constant(fof_constant object)
      {
        return createfof_constantAdapter();
      }
      @Override
      public Adapter casefof_var(fof_var object)
      {
        return createfof_varAdapter();
      }
      @Override
      public Adapter casefof_variable_list(fof_variable_list object)
      {
        return createfof_variable_listAdapter();
      }
      @Override
      public Adapter casetff_input(tff_input object)
      {
        return createtff_inputAdapter();
      }
      @Override
      public Adapter casetff_root(tff_root object)
      {
        return createtff_rootAdapter();
      }
      @Override
      public Adapter casetff_formula_type_definition(tff_formula_type_definition object)
      {
        return createtff_formula_type_definitionAdapter();
      }
      @Override
      public Adapter casetff_type_expression(tff_type_expression object)
      {
        return createtff_type_expressionAdapter();
      }
      @Override
      public Adapter casetff_type_atom(tff_type_atom object)
      {
        return createtff_type_atomAdapter();
      }
      @Override
      public Adapter casetff_type_constant(tff_type_constant object)
      {
        return createtff_type_constantAdapter();
      }
      @Override
      public Adapter casetff_expression(tff_expression object)
      {
        return createtff_expressionAdapter();
      }
      @Override
      public Adapter casetff_atom(tff_atom object)
      {
        return createtff_atomAdapter();
      }
      @Override
      public Adapter casetff_constant(tff_constant object)
      {
        return createtff_constantAdapter();
      }
      @Override
      public Adapter casetff_predefined_function_2_args(tff_predefined_function_2_args object)
      {
        return createtff_predefined_function_2_argsAdapter();
      }
      @Override
      public Adapter casetff_var(tff_var object)
      {
        return createtff_varAdapter();
      }
      @Override
      public Adapter casetff_var_declaration(tff_var_declaration object)
      {
        return createtff_var_declarationAdapter();
      }
      @Override
      public Adapter casetff_variable_list(tff_variable_list object)
      {
        return createtff_variable_listAdapter();
      }
      @Override
      public Adapter casecnf_input(cnf_input object)
      {
        return createcnf_inputAdapter();
      }
      @Override
      public Adapter casecnf_root(cnf_root object)
      {
        return createcnf_rootAdapter();
      }
      @Override
      public Adapter casecnf_formula_type_definition(cnf_formula_type_definition object)
      {
        return createcnf_formula_type_definitionAdapter();
      }
      @Override
      public Adapter casecnf_or(cnf_or object)
      {
        return createcnf_orAdapter();
      }
      @Override
      public Adapter casecnf_not(cnf_not object)
      {
        return createcnf_notAdapter();
      }
      @Override
      public Adapter casecnf_equality(cnf_equality object)
      {
        return createcnf_equalityAdapter();
      }
      @Override
      public Adapter casecnf_expression(cnf_expression object)
      {
        return createcnf_expressionAdapter();
      }
      @Override
      public Adapter casecnf_constant(cnf_constant object)
      {
        return createcnf_constantAdapter();
      }
      @Override
      public Adapter casecnf_var(cnf_var object)
      {
        return createcnf_varAdapter();
      }
      @Override
      public Adapter casethf_input(thf_input object)
      {
        return createthf_inputAdapter();
      }
      @Override
      public Adapter casethf_root(thf_root object)
      {
        return createthf_rootAdapter();
      }
      @Override
      public Adapter casethf_formula_type_definition(thf_formula_type_definition object)
      {
        return createthf_formula_type_definitionAdapter();
      }
      @Override
      public Adapter casethf_type_expression(thf_type_expression object)
      {
        return createthf_type_expressionAdapter();
      }
      @Override
      public Adapter casethf_type_atom(thf_type_atom object)
      {
        return createthf_type_atomAdapter();
      }
      @Override
      public Adapter casethf_type_constant(thf_type_constant object)
      {
        return createthf_type_constantAdapter();
      }
      @Override
      public Adapter casethf_expression(thf_expression object)
      {
        return createthf_expressionAdapter();
      }
      @Override
      public Adapter casethf_atom(thf_atom object)
      {
        return createthf_atomAdapter();
      }
      @Override
      public Adapter casethf_constant(thf_constant object)
      {
        return createthf_constantAdapter();
      }
      @Override
      public Adapter casethf_var(thf_var object)
      {
        return createthf_varAdapter();
      }
      @Override
      public Adapter casethf_variable_list(thf_variable_list object)
      {
        return createthf_variable_listAdapter();
      }
      @Override
      public Adapter casethf_var_declaration(thf_var_declaration object)
      {
        return createthf_var_declarationAdapter();
      }
      @Override
      public Adapter casebinary(binary object)
      {
        return createbinaryAdapter();
      }
      @Override
      public Adapter caseoper(oper object)
      {
        return createoperAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.include <em>include</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.include
   * @generated
   */
  public Adapter createincludeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.fof_input <em>fof input</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.fof_input
   * @generated
   */
  public Adapter createfof_inputAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.fof_root <em>fof root</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.fof_root
   * @generated
   */
  public Adapter createfof_rootAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.fof_expression <em>fof expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.fof_expression
   * @generated
   */
  public Adapter createfof_expressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.fof_atom <em>fof atom</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.fof_atom
   * @generated
   */
  public Adapter createfof_atomAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.fof_constant <em>fof constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.fof_constant
   * @generated
   */
  public Adapter createfof_constantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.fof_var <em>fof var</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.fof_var
   * @generated
   */
  public Adapter createfof_varAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.fof_variable_list <em>fof variable list</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.fof_variable_list
   * @generated
   */
  public Adapter createfof_variable_listAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.tff_input <em>tff input</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.tff_input
   * @generated
   */
  public Adapter createtff_inputAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.tff_root <em>tff root</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.tff_root
   * @generated
   */
  public Adapter createtff_rootAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.tff_formula_type_definition <em>tff formula type definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.tff_formula_type_definition
   * @generated
   */
  public Adapter createtff_formula_type_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.tff_type_expression <em>tff type expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.tff_type_expression
   * @generated
   */
  public Adapter createtff_type_expressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.tff_type_atom <em>tff type atom</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.tff_type_atom
   * @generated
   */
  public Adapter createtff_type_atomAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.tff_type_constant <em>tff type constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.tff_type_constant
   * @generated
   */
  public Adapter createtff_type_constantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.tff_expression <em>tff expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.tff_expression
   * @generated
   */
  public Adapter createtff_expressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.tff_atom <em>tff atom</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.tff_atom
   * @generated
   */
  public Adapter createtff_atomAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.tff_constant <em>tff constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.tff_constant
   * @generated
   */
  public Adapter createtff_constantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.tff_predefined_function_2_args <em>tff predefined function 2args</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.tff_predefined_function_2_args
   * @generated
   */
  public Adapter createtff_predefined_function_2_argsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.tff_var <em>tff var</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.tff_var
   * @generated
   */
  public Adapter createtff_varAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.tff_var_declaration <em>tff var declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.tff_var_declaration
   * @generated
   */
  public Adapter createtff_var_declarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.tff_variable_list <em>tff variable list</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.tff_variable_list
   * @generated
   */
  public Adapter createtff_variable_listAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.cnf_input <em>cnf input</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.cnf_input
   * @generated
   */
  public Adapter createcnf_inputAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.cnf_root <em>cnf root</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.cnf_root
   * @generated
   */
  public Adapter createcnf_rootAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.cnf_formula_type_definition <em>cnf formula type definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.cnf_formula_type_definition
   * @generated
   */
  public Adapter createcnf_formula_type_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.cnf_or <em>cnf or</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.cnf_or
   * @generated
   */
  public Adapter createcnf_orAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.cnf_not <em>cnf not</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.cnf_not
   * @generated
   */
  public Adapter createcnf_notAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.cnf_equality <em>cnf equality</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.cnf_equality
   * @generated
   */
  public Adapter createcnf_equalityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.cnf_expression <em>cnf expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.cnf_expression
   * @generated
   */
  public Adapter createcnf_expressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.cnf_constant <em>cnf constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.cnf_constant
   * @generated
   */
  public Adapter createcnf_constantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.cnf_var <em>cnf var</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.cnf_var
   * @generated
   */
  public Adapter createcnf_varAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.thf_input <em>thf input</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.thf_input
   * @generated
   */
  public Adapter createthf_inputAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.thf_root <em>thf root</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.thf_root
   * @generated
   */
  public Adapter createthf_rootAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.thf_formula_type_definition <em>thf formula type definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.thf_formula_type_definition
   * @generated
   */
  public Adapter createthf_formula_type_definitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.thf_type_expression <em>thf type expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.thf_type_expression
   * @generated
   */
  public Adapter createthf_type_expressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.thf_type_atom <em>thf type atom</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.thf_type_atom
   * @generated
   */
  public Adapter createthf_type_atomAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.thf_type_constant <em>thf type constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.thf_type_constant
   * @generated
   */
  public Adapter createthf_type_constantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.thf_expression <em>thf expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.thf_expression
   * @generated
   */
  public Adapter createthf_expressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.thf_atom <em>thf atom</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.thf_atom
   * @generated
   */
  public Adapter createthf_atomAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.thf_constant <em>thf constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.thf_constant
   * @generated
   */
  public Adapter createthf_constantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.thf_var <em>thf var</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.thf_var
   * @generated
   */
  public Adapter createthf_varAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.thf_variable_list <em>thf variable list</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.thf_variable_list
   * @generated
   */
  public Adapter createthf_variable_listAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.thf_var_declaration <em>thf var declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.thf_var_declaration
   * @generated
   */
  public Adapter createthf_var_declarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.binary <em>binary</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.binary
   * @generated
   */
  public Adapter createbinaryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibz.inf.tptp.parser.oper <em>oper</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibz.inf.tptp.parser.oper
   * @generated
   */
  public Adapter createoperAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //ParserAdapterFactory
