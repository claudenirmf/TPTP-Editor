/**
 * generated by Xtext 2.12.0
 */
package it.unibz.inf.tptp.parser.impl;

import it.unibz.inf.tptp.parser.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ParserFactoryImpl extends EFactoryImpl implements ParserFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static ParserFactory init()
  {
    try
    {
      ParserFactory theParserFactory = (ParserFactory)EPackage.Registry.INSTANCE.getEFactory(ParserPackage.eNS_URI);
      if (theParserFactory != null)
      {
        return theParserFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new ParserFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ParserFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case ParserPackage.MODEL: return createModel();
      case ParserPackage.INCLUDE: return createinclude();
      case ParserPackage.FOF_INPUT: return createfof_input();
      case ParserPackage.FOF_ROOT: return createfof_root();
      case ParserPackage.FOF_EXPRESSION: return createfof_expression();
      case ParserPackage.FOF_ATOM: return createfof_atom();
      case ParserPackage.FOF_CONSTANT: return createfof_constant();
      case ParserPackage.FOF_VAR: return createfof_var();
      case ParserPackage.FOF_VARIABLE_LIST: return createfof_variable_list();
      case ParserPackage.TFF_INPUT: return createtff_input();
      case ParserPackage.TFF_ROOT: return createtff_root();
      case ParserPackage.TFF_FORMULA_TYPE_DEFINITION: return createtff_formula_type_definition();
      case ParserPackage.TFF_TYPE_EXPRESSION: return createtff_type_expression();
      case ParserPackage.TFF_TYPE_ATOM: return createtff_type_atom();
      case ParserPackage.TFF_TYPE_CONSTANT: return createtff_type_constant();
      case ParserPackage.TFF_EXPRESSION: return createtff_expression();
      case ParserPackage.TFF_ATOM: return createtff_atom();
      case ParserPackage.TFF_CONSTANT: return createtff_constant();
      case ParserPackage.TFF_PREDEFINED_FUNCTION_2ARGS: return createtff_predefined_function_2_args();
      case ParserPackage.TFF_VAR: return createtff_var();
      case ParserPackage.TFF_VAR_DECLARATION: return createtff_var_declaration();
      case ParserPackage.TFF_VARIABLE_LIST: return createtff_variable_list();
      case ParserPackage.CNF_INPUT: return createcnf_input();
      case ParserPackage.CNF_ROOT: return createcnf_root();
      case ParserPackage.CNF_FORMULA_TYPE_DEFINITION: return createcnf_formula_type_definition();
      case ParserPackage.CNF_OR: return createcnf_or();
      case ParserPackage.CNF_NOT: return createcnf_not();
      case ParserPackage.CNF_EQUALITY: return createcnf_equality();
      case ParserPackage.CNF_EXPRESSION: return createcnf_expression();
      case ParserPackage.CNF_CONSTANT: return createcnf_constant();
      case ParserPackage.CNF_VAR: return createcnf_var();
      case ParserPackage.THF_INPUT: return createthf_input();
      case ParserPackage.THF_ROOT: return createthf_root();
      case ParserPackage.THF_FORMULA_TYPE_DEFINITION: return createthf_formula_type_definition();
      case ParserPackage.THF_TYPE_EXPRESSION: return createthf_type_expression();
      case ParserPackage.THF_TYPE_ATOM: return createthf_type_atom();
      case ParserPackage.THF_TYPE_CONSTANT: return createthf_type_constant();
      case ParserPackage.THF_EXPRESSION: return createthf_expression();
      case ParserPackage.THF_ATOM: return createthf_atom();
      case ParserPackage.THF_CONSTANT: return createthf_constant();
      case ParserPackage.THF_VAR: return createthf_var();
      case ParserPackage.THF_VARIABLE_LIST: return createthf_variable_list();
      case ParserPackage.THF_VAR_DECLARATION: return createthf_var_declaration();
      case ParserPackage.BINARY: return createbinary();
      case ParserPackage.OPER: return createoper();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public include createinclude()
  {
    includeImpl include = new includeImpl();
    return include;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public fof_input createfof_input()
  {
    fof_inputImpl fof_input = new fof_inputImpl();
    return fof_input;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public fof_root createfof_root()
  {
    fof_rootImpl fof_root = new fof_rootImpl();
    return fof_root;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public fof_expression createfof_expression()
  {
    fof_expressionImpl fof_expression = new fof_expressionImpl();
    return fof_expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public fof_atom createfof_atom()
  {
    fof_atomImpl fof_atom = new fof_atomImpl();
    return fof_atom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public fof_constant createfof_constant()
  {
    fof_constantImpl fof_constant = new fof_constantImpl();
    return fof_constant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public fof_var createfof_var()
  {
    fof_varImpl fof_var = new fof_varImpl();
    return fof_var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public fof_variable_list createfof_variable_list()
  {
    fof_variable_listImpl fof_variable_list = new fof_variable_listImpl();
    return fof_variable_list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public tff_input createtff_input()
  {
    tff_inputImpl tff_input = new tff_inputImpl();
    return tff_input;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public tff_root createtff_root()
  {
    tff_rootImpl tff_root = new tff_rootImpl();
    return tff_root;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public tff_formula_type_definition createtff_formula_type_definition()
  {
    tff_formula_type_definitionImpl tff_formula_type_definition = new tff_formula_type_definitionImpl();
    return tff_formula_type_definition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public tff_type_expression createtff_type_expression()
  {
    tff_type_expressionImpl tff_type_expression = new tff_type_expressionImpl();
    return tff_type_expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public tff_type_atom createtff_type_atom()
  {
    tff_type_atomImpl tff_type_atom = new tff_type_atomImpl();
    return tff_type_atom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public tff_type_constant createtff_type_constant()
  {
    tff_type_constantImpl tff_type_constant = new tff_type_constantImpl();
    return tff_type_constant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public tff_expression createtff_expression()
  {
    tff_expressionImpl tff_expression = new tff_expressionImpl();
    return tff_expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public tff_atom createtff_atom()
  {
    tff_atomImpl tff_atom = new tff_atomImpl();
    return tff_atom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public tff_constant createtff_constant()
  {
    tff_constantImpl tff_constant = new tff_constantImpl();
    return tff_constant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public tff_predefined_function_2_args createtff_predefined_function_2_args()
  {
    tff_predefined_function_2_argsImpl tff_predefined_function_2_args = new tff_predefined_function_2_argsImpl();
    return tff_predefined_function_2_args;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public tff_var createtff_var()
  {
    tff_varImpl tff_var = new tff_varImpl();
    return tff_var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public tff_var_declaration createtff_var_declaration()
  {
    tff_var_declarationImpl tff_var_declaration = new tff_var_declarationImpl();
    return tff_var_declaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public tff_variable_list createtff_variable_list()
  {
    tff_variable_listImpl tff_variable_list = new tff_variable_listImpl();
    return tff_variable_list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public cnf_input createcnf_input()
  {
    cnf_inputImpl cnf_input = new cnf_inputImpl();
    return cnf_input;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public cnf_root createcnf_root()
  {
    cnf_rootImpl cnf_root = new cnf_rootImpl();
    return cnf_root;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public cnf_formula_type_definition createcnf_formula_type_definition()
  {
    cnf_formula_type_definitionImpl cnf_formula_type_definition = new cnf_formula_type_definitionImpl();
    return cnf_formula_type_definition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public cnf_or createcnf_or()
  {
    cnf_orImpl cnf_or = new cnf_orImpl();
    return cnf_or;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public cnf_not createcnf_not()
  {
    cnf_notImpl cnf_not = new cnf_notImpl();
    return cnf_not;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public cnf_equality createcnf_equality()
  {
    cnf_equalityImpl cnf_equality = new cnf_equalityImpl();
    return cnf_equality;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public cnf_expression createcnf_expression()
  {
    cnf_expressionImpl cnf_expression = new cnf_expressionImpl();
    return cnf_expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public cnf_constant createcnf_constant()
  {
    cnf_constantImpl cnf_constant = new cnf_constantImpl();
    return cnf_constant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public cnf_var createcnf_var()
  {
    cnf_varImpl cnf_var = new cnf_varImpl();
    return cnf_var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public thf_input createthf_input()
  {
    thf_inputImpl thf_input = new thf_inputImpl();
    return thf_input;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public thf_root createthf_root()
  {
    thf_rootImpl thf_root = new thf_rootImpl();
    return thf_root;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public thf_formula_type_definition createthf_formula_type_definition()
  {
    thf_formula_type_definitionImpl thf_formula_type_definition = new thf_formula_type_definitionImpl();
    return thf_formula_type_definition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public thf_type_expression createthf_type_expression()
  {
    thf_type_expressionImpl thf_type_expression = new thf_type_expressionImpl();
    return thf_type_expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public thf_type_atom createthf_type_atom()
  {
    thf_type_atomImpl thf_type_atom = new thf_type_atomImpl();
    return thf_type_atom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public thf_type_constant createthf_type_constant()
  {
    thf_type_constantImpl thf_type_constant = new thf_type_constantImpl();
    return thf_type_constant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public thf_expression createthf_expression()
  {
    thf_expressionImpl thf_expression = new thf_expressionImpl();
    return thf_expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public thf_atom createthf_atom()
  {
    thf_atomImpl thf_atom = new thf_atomImpl();
    return thf_atom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public thf_constant createthf_constant()
  {
    thf_constantImpl thf_constant = new thf_constantImpl();
    return thf_constant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public thf_var createthf_var()
  {
    thf_varImpl thf_var = new thf_varImpl();
    return thf_var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public thf_variable_list createthf_variable_list()
  {
    thf_variable_listImpl thf_variable_list = new thf_variable_listImpl();
    return thf_variable_list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public thf_var_declaration createthf_var_declaration()
  {
    thf_var_declarationImpl thf_var_declaration = new thf_var_declarationImpl();
    return thf_var_declaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public binary createbinary()
  {
    binaryImpl binary = new binaryImpl();
    return binary;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public oper createoper()
  {
    operImpl oper = new operImpl();
    return oper;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ParserPackage getParserPackage()
  {
    return (ParserPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static ParserPackage getPackage()
  {
    return ParserPackage.eINSTANCE;
  }

} //ParserFactoryImpl
