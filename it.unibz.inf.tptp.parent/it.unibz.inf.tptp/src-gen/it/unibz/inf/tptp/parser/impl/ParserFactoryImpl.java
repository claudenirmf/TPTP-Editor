/**
 * generated by Xtext 2.12.0
 */
package it.unibz.inf.tptp.parser.impl;

import it.unibz.inf.tptp.parser.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ParserFactoryImpl extends EFactoryImpl implements ParserFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static ParserFactory init()
  {
    try
    {
      ParserFactory theParserFactory = (ParserFactory)EPackage.Registry.INSTANCE.getEFactory(ParserPackage.eNS_URI);
      if (theParserFactory != null)
      {
        return theParserFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new ParserFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ParserFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case ParserPackage.MODEL: return createModel();
      case ParserPackage.INCLUDE: return createInclude();
      case ParserPackage.FOF_INPUT: return createFof_input();
      case ParserPackage.FOF_ROOT: return createFof_root();
      case ParserPackage.FOF_EXPRESSION: return createFof_expression();
      case ParserPackage.FOF_ATOM: return createFof_atom();
      case ParserPackage.FOF_CONSTANT: return createFof_constant();
      case ParserPackage.FOF_VAR: return createFof_var();
      case ParserPackage.FOF_VARIABLE_LIST: return createFof_variable_list();
      case ParserPackage.TFF_INPUT: return createTff_input();
      case ParserPackage.TFF_ROOT: return createTff_root();
      case ParserPackage.TFF_FORMULA_TYPE_DEFINITION: return createTff_formula_type_definition();
      case ParserPackage.TFF_TYPE_EXPRESSION: return createTff_type_expression();
      case ParserPackage.TFF_TYPE_ATOM: return createTff_type_atom();
      case ParserPackage.TFF_TYPE_CONSTANT: return createTff_type_constant();
      case ParserPackage.TFF_EXPRESSION: return createTff_expression();
      case ParserPackage.TFF_ATOM: return createTff_atom();
      case ParserPackage.TFF_CONSTANT: return createTff_constant();
      case ParserPackage.TFF_PREDEFINED_FUNCTION_2ARGS: return createTff_predefined_function_2_args();
      case ParserPackage.TFF_VAR: return createTff_var();
      case ParserPackage.TFF_VAR_DECLARATION: return createTff_var_declaration();
      case ParserPackage.TFF_VARIABLE_LIST: return createTff_variable_list();
      case ParserPackage.CNF_INPUT: return createCnf_input();
      case ParserPackage.CNF_ROOT: return createCnf_root();
      case ParserPackage.CNF_FORMULA_TYPE_DEFINITION: return createCnf_formula_type_definition();
      case ParserPackage.CNF_OR: return createCnf_or();
      case ParserPackage.CNF_NOT: return createCnf_not();
      case ParserPackage.CNF_EQUALITY: return createCnf_equality();
      case ParserPackage.CNF_EXPRESSION: return createCnf_expression();
      case ParserPackage.CNF_CONSTANT: return createCnf_constant();
      case ParserPackage.CNF_VAR: return createCnf_var();
      case ParserPackage.THF_INPUT: return createThf_input();
      case ParserPackage.THF_ROOT: return createThf_root();
      case ParserPackage.THF_FORMULA_TYPE_DEFINITION: return createThf_formula_type_definition();
      case ParserPackage.THF_TYPE_EXPRESSION: return createThf_type_expression();
      case ParserPackage.THF_TYPE_ATOM: return createThf_type_atom();
      case ParserPackage.THF_TYPE_CONSTANT: return createThf_type_constant();
      case ParserPackage.THF_EXPRESSION: return createThf_expression();
      case ParserPackage.THF_ATOM: return createThf_atom();
      case ParserPackage.THF_CONSTANT: return createThf_constant();
      case ParserPackage.THF_VAR: return createThf_var();
      case ParserPackage.THF_VARIABLE_LIST: return createThf_variable_list();
      case ParserPackage.THF_VAR_DECLARATION: return createThf_var_declaration();
      case ParserPackage.BINARY: return createbinary();
      case ParserPackage.OPER: return createoper();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Include createInclude()
  {
    IncludeImpl include = new IncludeImpl();
    return include;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Fof_input createFof_input()
  {
    Fof_inputImpl fof_input = new Fof_inputImpl();
    return fof_input;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Fof_root createFof_root()
  {
    Fof_rootImpl fof_root = new Fof_rootImpl();
    return fof_root;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Fof_expression createFof_expression()
  {
    Fof_expressionImpl fof_expression = new Fof_expressionImpl();
    return fof_expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Fof_atom createFof_atom()
  {
    Fof_atomImpl fof_atom = new Fof_atomImpl();
    return fof_atom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Fof_constant createFof_constant()
  {
    Fof_constantImpl fof_constant = new Fof_constantImpl();
    return fof_constant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Fof_var createFof_var()
  {
    Fof_varImpl fof_var = new Fof_varImpl();
    return fof_var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Fof_variable_list createFof_variable_list()
  {
    Fof_variable_listImpl fof_variable_list = new Fof_variable_listImpl();
    return fof_variable_list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Tff_input createTff_input()
  {
    Tff_inputImpl tff_input = new Tff_inputImpl();
    return tff_input;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Tff_root createTff_root()
  {
    Tff_rootImpl tff_root = new Tff_rootImpl();
    return tff_root;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Tff_formula_type_definition createTff_formula_type_definition()
  {
    Tff_formula_type_definitionImpl tff_formula_type_definition = new Tff_formula_type_definitionImpl();
    return tff_formula_type_definition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Tff_type_expression createTff_type_expression()
  {
    Tff_type_expressionImpl tff_type_expression = new Tff_type_expressionImpl();
    return tff_type_expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Tff_type_atom createTff_type_atom()
  {
    Tff_type_atomImpl tff_type_atom = new Tff_type_atomImpl();
    return tff_type_atom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Tff_type_constant createTff_type_constant()
  {
    Tff_type_constantImpl tff_type_constant = new Tff_type_constantImpl();
    return tff_type_constant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Tff_expression createTff_expression()
  {
    Tff_expressionImpl tff_expression = new Tff_expressionImpl();
    return tff_expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Tff_atom createTff_atom()
  {
    Tff_atomImpl tff_atom = new Tff_atomImpl();
    return tff_atom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Tff_constant createTff_constant()
  {
    Tff_constantImpl tff_constant = new Tff_constantImpl();
    return tff_constant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Tff_predefined_function_2_args createTff_predefined_function_2_args()
  {
    Tff_predefined_function_2_argsImpl tff_predefined_function_2_args = new Tff_predefined_function_2_argsImpl();
    return tff_predefined_function_2_args;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Tff_var createTff_var()
  {
    Tff_varImpl tff_var = new Tff_varImpl();
    return tff_var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Tff_var_declaration createTff_var_declaration()
  {
    Tff_var_declarationImpl tff_var_declaration = new Tff_var_declarationImpl();
    return tff_var_declaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Tff_variable_list createTff_variable_list()
  {
    Tff_variable_listImpl tff_variable_list = new Tff_variable_listImpl();
    return tff_variable_list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Cnf_input createCnf_input()
  {
    Cnf_inputImpl cnf_input = new Cnf_inputImpl();
    return cnf_input;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Cnf_root createCnf_root()
  {
    Cnf_rootImpl cnf_root = new Cnf_rootImpl();
    return cnf_root;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Cnf_formula_type_definition createCnf_formula_type_definition()
  {
    Cnf_formula_type_definitionImpl cnf_formula_type_definition = new Cnf_formula_type_definitionImpl();
    return cnf_formula_type_definition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Cnf_or createCnf_or()
  {
    Cnf_orImpl cnf_or = new Cnf_orImpl();
    return cnf_or;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Cnf_not createCnf_not()
  {
    Cnf_notImpl cnf_not = new Cnf_notImpl();
    return cnf_not;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Cnf_equality createCnf_equality()
  {
    Cnf_equalityImpl cnf_equality = new Cnf_equalityImpl();
    return cnf_equality;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Cnf_expression createCnf_expression()
  {
    Cnf_expressionImpl cnf_expression = new Cnf_expressionImpl();
    return cnf_expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Cnf_constant createCnf_constant()
  {
    Cnf_constantImpl cnf_constant = new Cnf_constantImpl();
    return cnf_constant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Cnf_var createCnf_var()
  {
    Cnf_varImpl cnf_var = new Cnf_varImpl();
    return cnf_var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Thf_input createThf_input()
  {
    Thf_inputImpl thf_input = new Thf_inputImpl();
    return thf_input;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Thf_root createThf_root()
  {
    Thf_rootImpl thf_root = new Thf_rootImpl();
    return thf_root;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Thf_formula_type_definition createThf_formula_type_definition()
  {
    Thf_formula_type_definitionImpl thf_formula_type_definition = new Thf_formula_type_definitionImpl();
    return thf_formula_type_definition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Thf_type_expression createThf_type_expression()
  {
    Thf_type_expressionImpl thf_type_expression = new Thf_type_expressionImpl();
    return thf_type_expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Thf_type_atom createThf_type_atom()
  {
    Thf_type_atomImpl thf_type_atom = new Thf_type_atomImpl();
    return thf_type_atom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Thf_type_constant createThf_type_constant()
  {
    Thf_type_constantImpl thf_type_constant = new Thf_type_constantImpl();
    return thf_type_constant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Thf_expression createThf_expression()
  {
    Thf_expressionImpl thf_expression = new Thf_expressionImpl();
    return thf_expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Thf_atom createThf_atom()
  {
    Thf_atomImpl thf_atom = new Thf_atomImpl();
    return thf_atom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Thf_constant createThf_constant()
  {
    Thf_constantImpl thf_constant = new Thf_constantImpl();
    return thf_constant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Thf_var createThf_var()
  {
    Thf_varImpl thf_var = new Thf_varImpl();
    return thf_var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Thf_variable_list createThf_variable_list()
  {
    Thf_variable_listImpl thf_variable_list = new Thf_variable_listImpl();
    return thf_variable_list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Thf_var_declaration createThf_var_declaration()
  {
    Thf_var_declarationImpl thf_var_declaration = new Thf_var_declarationImpl();
    return thf_var_declaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public binary createbinary()
  {
    binaryImpl binary = new binaryImpl();
    return binary;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public oper createoper()
  {
    operImpl oper = new operImpl();
    return oper;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ParserPackage getParserPackage()
  {
    return (ParserPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static ParserPackage getPackage()
  {
    return ParserPackage.eINSTANCE;
  }

} //ParserFactoryImpl
