/**
 * generated by Xtext 2.12.0
 */
package it.unibz.inf.tptp.parser.impl;

import it.unibz.inf.tptp.parser.Cnf_equality;
import it.unibz.inf.tptp.parser.Cnf_expression;
import it.unibz.inf.tptp.parser.ParserPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Cnf equality</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link it.unibz.inf.tptp.parser.impl.Cnf_equalityImpl#getExpL <em>Exp L</em>}</li>
 *   <li>{@link it.unibz.inf.tptp.parser.impl.Cnf_equalityImpl#getEq <em>Eq</em>}</li>
 *   <li>{@link it.unibz.inf.tptp.parser.impl.Cnf_equalityImpl#getExpR <em>Exp R</em>}</li>
 * </ul>
 *
 * @generated
 */
public class Cnf_equalityImpl extends MinimalEObjectImpl.Container implements Cnf_equality
{
  /**
   * The cached value of the '{@link #getExpL() <em>Exp L</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpL()
   * @generated
   * @ordered
   */
  protected Cnf_expression expL;

  /**
   * The default value of the '{@link #getEq() <em>Eq</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEq()
   * @generated
   * @ordered
   */
  protected static final String EQ_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getEq() <em>Eq</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEq()
   * @generated
   * @ordered
   */
  protected String eq = EQ_EDEFAULT;

  /**
   * The cached value of the '{@link #getExpR() <em>Exp R</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpR()
   * @generated
   * @ordered
   */
  protected Cnf_expression expR;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Cnf_equalityImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ParserPackage.Literals.CNF_EQUALITY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Cnf_expression getExpL()
  {
    return expL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpL(Cnf_expression newExpL, NotificationChain msgs)
  {
    Cnf_expression oldExpL = expL;
    expL = newExpL;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ParserPackage.CNF_EQUALITY__EXP_L, oldExpL, newExpL);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExpL(Cnf_expression newExpL)
  {
    if (newExpL != expL)
    {
      NotificationChain msgs = null;
      if (expL != null)
        msgs = ((InternalEObject)expL).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ParserPackage.CNF_EQUALITY__EXP_L, null, msgs);
      if (newExpL != null)
        msgs = ((InternalEObject)newExpL).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ParserPackage.CNF_EQUALITY__EXP_L, null, msgs);
      msgs = basicSetExpL(newExpL, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ParserPackage.CNF_EQUALITY__EXP_L, newExpL, newExpL));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getEq()
  {
    return eq;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEq(String newEq)
  {
    String oldEq = eq;
    eq = newEq;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ParserPackage.CNF_EQUALITY__EQ, oldEq, eq));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Cnf_expression getExpR()
  {
    return expR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpR(Cnf_expression newExpR, NotificationChain msgs)
  {
    Cnf_expression oldExpR = expR;
    expR = newExpR;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ParserPackage.CNF_EQUALITY__EXP_R, oldExpR, newExpR);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExpR(Cnf_expression newExpR)
  {
    if (newExpR != expR)
    {
      NotificationChain msgs = null;
      if (expR != null)
        msgs = ((InternalEObject)expR).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ParserPackage.CNF_EQUALITY__EXP_R, null, msgs);
      if (newExpR != null)
        msgs = ((InternalEObject)newExpR).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ParserPackage.CNF_EQUALITY__EXP_R, null, msgs);
      msgs = basicSetExpR(newExpR, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ParserPackage.CNF_EQUALITY__EXP_R, newExpR, newExpR));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ParserPackage.CNF_EQUALITY__EXP_L:
        return basicSetExpL(null, msgs);
      case ParserPackage.CNF_EQUALITY__EXP_R:
        return basicSetExpR(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ParserPackage.CNF_EQUALITY__EXP_L:
        return getExpL();
      case ParserPackage.CNF_EQUALITY__EQ:
        return getEq();
      case ParserPackage.CNF_EQUALITY__EXP_R:
        return getExpR();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ParserPackage.CNF_EQUALITY__EXP_L:
        setExpL((Cnf_expression)newValue);
        return;
      case ParserPackage.CNF_EQUALITY__EQ:
        setEq((String)newValue);
        return;
      case ParserPackage.CNF_EQUALITY__EXP_R:
        setExpR((Cnf_expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ParserPackage.CNF_EQUALITY__EXP_L:
        setExpL((Cnf_expression)null);
        return;
      case ParserPackage.CNF_EQUALITY__EQ:
        setEq(EQ_EDEFAULT);
        return;
      case ParserPackage.CNF_EQUALITY__EXP_R:
        setExpR((Cnf_expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ParserPackage.CNF_EQUALITY__EXP_L:
        return expL != null;
      case ParserPackage.CNF_EQUALITY__EQ:
        return EQ_EDEFAULT == null ? eq != null : !EQ_EDEFAULT.equals(eq);
      case ParserPackage.CNF_EQUALITY__EXP_R:
        return expR != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (eq: ");
    result.append(eq);
    result.append(')');
    return result.toString();
  }

} //Cnf_equalityImpl
