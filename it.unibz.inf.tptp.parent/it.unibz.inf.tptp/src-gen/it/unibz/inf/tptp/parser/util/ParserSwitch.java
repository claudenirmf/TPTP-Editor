/**
 * generated by Xtext 2.12.0
 */
package it.unibz.inf.tptp.parser.util;

import it.unibz.inf.tptp.parser.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see it.unibz.inf.tptp.parser.ParserPackage
 * @generated
 */
public class ParserSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static ParserPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ParserSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = ParserPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case ParserPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.INCLUDE:
      {
        Include include = (Include)theEObject;
        T result = caseInclude(include);
        if (result == null) result = caseFof_input(include);
        if (result == null) result = caseTff_input(include);
        if (result == null) result = caseCnf_input(include);
        if (result == null) result = caseThf_input(include);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.FOF_INPUT:
      {
        Fof_input fof_input = (Fof_input)theEObject;
        T result = caseFof_input(fof_input);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.FOF_ROOT:
      {
        Fof_root fof_root = (Fof_root)theEObject;
        T result = caseFof_root(fof_root);
        if (result == null) result = caseFof_input(fof_root);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.FOF_EXPRESSION:
      {
        Fof_expression fof_expression = (Fof_expression)theEObject;
        T result = caseFof_expression(fof_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.FOF_ATOM:
      {
        Fof_atom fof_atom = (Fof_atom)theEObject;
        T result = caseFof_atom(fof_atom);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.FOF_CONSTANT:
      {
        Fof_constant fof_constant = (Fof_constant)theEObject;
        T result = caseFof_constant(fof_constant);
        if (result == null) result = caseFof_atom(fof_constant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.FOF_VAR:
      {
        Fof_var fof_var = (Fof_var)theEObject;
        T result = caseFof_var(fof_var);
        if (result == null) result = caseFof_atom(fof_var);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.FOF_VARIABLE_LIST:
      {
        Fof_variable_list fof_variable_list = (Fof_variable_list)theEObject;
        T result = caseFof_variable_list(fof_variable_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.TFF_INPUT:
      {
        Tff_input tff_input = (Tff_input)theEObject;
        T result = caseTff_input(tff_input);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.TFF_ROOT:
      {
        Tff_root tff_root = (Tff_root)theEObject;
        T result = caseTff_root(tff_root);
        if (result == null) result = caseTff_input(tff_root);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.TFF_FORMULA_TYPE_DEFINITION:
      {
        Tff_formula_type_definition tff_formula_type_definition = (Tff_formula_type_definition)theEObject;
        T result = caseTff_formula_type_definition(tff_formula_type_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.TFF_TYPE_EXPRESSION:
      {
        Tff_type_expression tff_type_expression = (Tff_type_expression)theEObject;
        T result = caseTff_type_expression(tff_type_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.TFF_TYPE_ATOM:
      {
        Tff_type_atom tff_type_atom = (Tff_type_atom)theEObject;
        T result = caseTff_type_atom(tff_type_atom);
        if (result == null) result = caseTff_type_expression(tff_type_atom);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.TFF_TYPE_CONSTANT:
      {
        Tff_type_constant tff_type_constant = (Tff_type_constant)theEObject;
        T result = caseTff_type_constant(tff_type_constant);
        if (result == null) result = caseTff_type_atom(tff_type_constant);
        if (result == null) result = caseTff_type_expression(tff_type_constant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.TFF_EXPRESSION:
      {
        Tff_expression tff_expression = (Tff_expression)theEObject;
        T result = caseTff_expression(tff_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.TFF_ATOM:
      {
        Tff_atom tff_atom = (Tff_atom)theEObject;
        T result = caseTff_atom(tff_atom);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.TFF_CONSTANT:
      {
        Tff_constant tff_constant = (Tff_constant)theEObject;
        T result = caseTff_constant(tff_constant);
        if (result == null) result = caseTff_atom(tff_constant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.TFF_PREDEFINED_FUNCTION_2ARGS:
      {
        Tff_predefined_function_2_args tff_predefined_function_2_args = (Tff_predefined_function_2_args)theEObject;
        T result = caseTff_predefined_function_2_args(tff_predefined_function_2_args);
        if (result == null) result = caseTff_atom(tff_predefined_function_2_args);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.TFF_VAR:
      {
        Tff_var tff_var = (Tff_var)theEObject;
        T result = caseTff_var(tff_var);
        if (result == null) result = caseTff_type_atom(tff_var);
        if (result == null) result = caseTff_atom(tff_var);
        if (result == null) result = caseTff_type_expression(tff_var);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.TFF_VAR_DECLARATION:
      {
        Tff_var_declaration tff_var_declaration = (Tff_var_declaration)theEObject;
        T result = caseTff_var_declaration(tff_var_declaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.TFF_VARIABLE_LIST:
      {
        Tff_variable_list tff_variable_list = (Tff_variable_list)theEObject;
        T result = caseTff_variable_list(tff_variable_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.CNF_INPUT:
      {
        Cnf_input cnf_input = (Cnf_input)theEObject;
        T result = caseCnf_input(cnf_input);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.CNF_ROOT:
      {
        Cnf_root cnf_root = (Cnf_root)theEObject;
        T result = caseCnf_root(cnf_root);
        if (result == null) result = caseCnf_input(cnf_root);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.CNF_FORMULA_TYPE_DEFINITION:
      {
        Cnf_formula_type_definition cnf_formula_type_definition = (Cnf_formula_type_definition)theEObject;
        T result = caseCnf_formula_type_definition(cnf_formula_type_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.CNF_OR:
      {
        Cnf_or cnf_or = (Cnf_or)theEObject;
        T result = caseCnf_or(cnf_or);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.CNF_NOT:
      {
        Cnf_not cnf_not = (Cnf_not)theEObject;
        T result = caseCnf_not(cnf_not);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.CNF_EQUALITY:
      {
        Cnf_equality cnf_equality = (Cnf_equality)theEObject;
        T result = caseCnf_equality(cnf_equality);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.CNF_EXPRESSION:
      {
        Cnf_expression cnf_expression = (Cnf_expression)theEObject;
        T result = caseCnf_expression(cnf_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.CNF_CONSTANT:
      {
        Cnf_constant cnf_constant = (Cnf_constant)theEObject;
        T result = caseCnf_constant(cnf_constant);
        if (result == null) result = caseCnf_expression(cnf_constant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.CNF_VAR:
      {
        Cnf_var cnf_var = (Cnf_var)theEObject;
        T result = caseCnf_var(cnf_var);
        if (result == null) result = caseCnf_expression(cnf_var);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.THF_INPUT:
      {
        Thf_input thf_input = (Thf_input)theEObject;
        T result = caseThf_input(thf_input);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.THF_ROOT:
      {
        Thf_root thf_root = (Thf_root)theEObject;
        T result = caseThf_root(thf_root);
        if (result == null) result = caseThf_input(thf_root);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.THF_FORMULA_TYPE_DEFINITION:
      {
        Thf_formula_type_definition thf_formula_type_definition = (Thf_formula_type_definition)theEObject;
        T result = caseThf_formula_type_definition(thf_formula_type_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.THF_TYPE_EXPRESSION:
      {
        Thf_type_expression thf_type_expression = (Thf_type_expression)theEObject;
        T result = caseThf_type_expression(thf_type_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.THF_TYPE_ATOM:
      {
        Thf_type_atom thf_type_atom = (Thf_type_atom)theEObject;
        T result = caseThf_type_atom(thf_type_atom);
        if (result == null) result = caseThf_type_expression(thf_type_atom);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.THF_TYPE_CONSTANT:
      {
        Thf_type_constant thf_type_constant = (Thf_type_constant)theEObject;
        T result = caseThf_type_constant(thf_type_constant);
        if (result == null) result = caseThf_type_atom(thf_type_constant);
        if (result == null) result = caseThf_type_expression(thf_type_constant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.THF_EXPRESSION:
      {
        Thf_expression thf_expression = (Thf_expression)theEObject;
        T result = caseThf_expression(thf_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.THF_ATOM:
      {
        Thf_atom thf_atom = (Thf_atom)theEObject;
        T result = caseThf_atom(thf_atom);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.THF_CONSTANT:
      {
        Thf_constant thf_constant = (Thf_constant)theEObject;
        T result = caseThf_constant(thf_constant);
        if (result == null) result = caseThf_atom(thf_constant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.THF_VAR:
      {
        Thf_var thf_var = (Thf_var)theEObject;
        T result = caseThf_var(thf_var);
        if (result == null) result = caseThf_atom(thf_var);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.THF_VARIABLE_LIST:
      {
        Thf_variable_list thf_variable_list = (Thf_variable_list)theEObject;
        T result = caseThf_variable_list(thf_variable_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.THF_VAR_DECLARATION:
      {
        Thf_var_declaration thf_var_declaration = (Thf_var_declaration)theEObject;
        T result = caseThf_var_declaration(thf_var_declaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.BINARY:
      {
        binary binary = (binary)theEObject;
        T result = casebinary(binary);
        if (result == null) result = caseFof_expression(binary);
        if (result == null) result = caseTff_expression(binary);
        if (result == null) result = caseThf_expression(binary);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.OPER:
      {
        oper oper = (oper)theEObject;
        T result = caseoper(oper);
        if (result == null) result = caseTff_type_expression(oper);
        if (result == null) result = caseThf_type_expression(oper);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Include</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Include</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInclude(Include object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Fof input</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Fof input</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFof_input(Fof_input object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Fof root</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Fof root</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFof_root(Fof_root object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Fof expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Fof expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFof_expression(Fof_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Fof atom</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Fof atom</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFof_atom(Fof_atom object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Fof constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Fof constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFof_constant(Fof_constant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Fof var</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Fof var</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFof_var(Fof_var object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Fof variable list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Fof variable list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFof_variable_list(Fof_variable_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tff input</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tff input</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTff_input(Tff_input object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tff root</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tff root</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTff_root(Tff_root object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tff formula type definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tff formula type definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTff_formula_type_definition(Tff_formula_type_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tff type expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tff type expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTff_type_expression(Tff_type_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tff type atom</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tff type atom</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTff_type_atom(Tff_type_atom object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tff type constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tff type constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTff_type_constant(Tff_type_constant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tff expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tff expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTff_expression(Tff_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tff atom</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tff atom</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTff_atom(Tff_atom object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tff constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tff constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTff_constant(Tff_constant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tff predefined function 2args</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tff predefined function 2args</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTff_predefined_function_2_args(Tff_predefined_function_2_args object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tff var</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tff var</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTff_var(Tff_var object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tff var declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tff var declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTff_var_declaration(Tff_var_declaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tff variable list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tff variable list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTff_variable_list(Tff_variable_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cnf input</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cnf input</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCnf_input(Cnf_input object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cnf root</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cnf root</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCnf_root(Cnf_root object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cnf formula type definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cnf formula type definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCnf_formula_type_definition(Cnf_formula_type_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cnf or</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cnf or</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCnf_or(Cnf_or object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cnf not</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cnf not</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCnf_not(Cnf_not object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cnf equality</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cnf equality</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCnf_equality(Cnf_equality object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cnf expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cnf expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCnf_expression(Cnf_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cnf constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cnf constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCnf_constant(Cnf_constant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cnf var</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cnf var</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCnf_var(Cnf_var object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Thf input</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Thf input</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseThf_input(Thf_input object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Thf root</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Thf root</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseThf_root(Thf_root object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Thf formula type definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Thf formula type definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseThf_formula_type_definition(Thf_formula_type_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Thf type expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Thf type expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseThf_type_expression(Thf_type_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Thf type atom</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Thf type atom</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseThf_type_atom(Thf_type_atom object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Thf type constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Thf type constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseThf_type_constant(Thf_type_constant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Thf expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Thf expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseThf_expression(Thf_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Thf atom</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Thf atom</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseThf_atom(Thf_atom object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Thf constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Thf constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseThf_constant(Thf_constant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Thf var</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Thf var</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseThf_var(Thf_var object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Thf variable list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Thf variable list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseThf_variable_list(Thf_variable_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Thf var declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Thf var declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseThf_var_declaration(Thf_var_declaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>binary</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>binary</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casebinary(binary object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>oper</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>oper</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseoper(oper object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //ParserSwitch
