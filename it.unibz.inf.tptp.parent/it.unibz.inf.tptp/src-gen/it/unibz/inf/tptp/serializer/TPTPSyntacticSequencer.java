/*
 * generated by Xtext 2.12.0
 */
package it.unibz.inf.tptp.serializer;

import com.google.inject.Inject;
import it.unibz.inf.tptp.services.TPTPGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class TPTPSyntacticSequencer extends AbstractSyntacticSequencer {

	protected TPTPGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Fof_terminating_expression_LeftParenthesisKeyword_1_0_a;
	protected AbstractElementAlias match_Fof_terminating_expression_LeftParenthesisKeyword_1_0_p;
	protected AbstractElementAlias match_Tff_formula_type_definition_LeftParenthesisKeyword_0_0_a;
	protected AbstractElementAlias match_Tff_terminal_type_expression_LeftParenthesisKeyword_1_0_a;
	protected AbstractElementAlias match_Tff_terminal_type_expression_LeftParenthesisKeyword_1_0_p;
	protected AbstractElementAlias match_Tff_terminating_expression_LeftParenthesisKeyword_1_0_a;
	protected AbstractElementAlias match_Tff_terminating_expression_LeftParenthesisKeyword_1_0_p;
	protected AbstractElementAlias match_Thf_formula_type_definition_LeftParenthesisKeyword_0_0_a;
	protected AbstractElementAlias match_Thf_terminal_type_expression_LeftParenthesisKeyword_1_0_a;
	protected AbstractElementAlias match_Thf_terminal_type_expression_LeftParenthesisKeyword_1_0_p;
	protected AbstractElementAlias match_Thf_terminating_expression_LeftParenthesisKeyword_1_0_a;
	protected AbstractElementAlias match_Thf_terminating_expression_LeftParenthesisKeyword_1_0_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (TPTPGrammarAccess) access;
		match_Fof_terminating_expression_LeftParenthesisKeyword_1_0_a = new TokenAlias(true, true, grammarAccess.getFof_terminating_expressionAccess().getLeftParenthesisKeyword_1_0());
		match_Fof_terminating_expression_LeftParenthesisKeyword_1_0_p = new TokenAlias(true, false, grammarAccess.getFof_terminating_expressionAccess().getLeftParenthesisKeyword_1_0());
		match_Tff_formula_type_definition_LeftParenthesisKeyword_0_0_a = new TokenAlias(true, true, grammarAccess.getTff_formula_type_definitionAccess().getLeftParenthesisKeyword_0_0());
		match_Tff_terminal_type_expression_LeftParenthesisKeyword_1_0_a = new TokenAlias(true, true, grammarAccess.getTff_terminal_type_expressionAccess().getLeftParenthesisKeyword_1_0());
		match_Tff_terminal_type_expression_LeftParenthesisKeyword_1_0_p = new TokenAlias(true, false, grammarAccess.getTff_terminal_type_expressionAccess().getLeftParenthesisKeyword_1_0());
		match_Tff_terminating_expression_LeftParenthesisKeyword_1_0_a = new TokenAlias(true, true, grammarAccess.getTff_terminating_expressionAccess().getLeftParenthesisKeyword_1_0());
		match_Tff_terminating_expression_LeftParenthesisKeyword_1_0_p = new TokenAlias(true, false, grammarAccess.getTff_terminating_expressionAccess().getLeftParenthesisKeyword_1_0());
		match_Thf_formula_type_definition_LeftParenthesisKeyword_0_0_a = new TokenAlias(true, true, grammarAccess.getThf_formula_type_definitionAccess().getLeftParenthesisKeyword_0_0());
		match_Thf_terminal_type_expression_LeftParenthesisKeyword_1_0_a = new TokenAlias(true, true, grammarAccess.getThf_terminal_type_expressionAccess().getLeftParenthesisKeyword_1_0());
		match_Thf_terminal_type_expression_LeftParenthesisKeyword_1_0_p = new TokenAlias(true, false, grammarAccess.getThf_terminal_type_expressionAccess().getLeftParenthesisKeyword_1_0());
		match_Thf_terminating_expression_LeftParenthesisKeyword_1_0_a = new TokenAlias(true, true, grammarAccess.getThf_terminating_expressionAccess().getLeftParenthesisKeyword_1_0());
		match_Thf_terminating_expression_LeftParenthesisKeyword_1_0_p = new TokenAlias(true, false, grammarAccess.getThf_terminating_expressionAccess().getLeftParenthesisKeyword_1_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Fof_terminating_expression_LeftParenthesisKeyword_1_0_a.equals(syntax))
				emit_Fof_terminating_expression_LeftParenthesisKeyword_1_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Fof_terminating_expression_LeftParenthesisKeyword_1_0_p.equals(syntax))
				emit_Fof_terminating_expression_LeftParenthesisKeyword_1_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Tff_formula_type_definition_LeftParenthesisKeyword_0_0_a.equals(syntax))
				emit_Tff_formula_type_definition_LeftParenthesisKeyword_0_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Tff_terminal_type_expression_LeftParenthesisKeyword_1_0_a.equals(syntax))
				emit_Tff_terminal_type_expression_LeftParenthesisKeyword_1_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Tff_terminal_type_expression_LeftParenthesisKeyword_1_0_p.equals(syntax))
				emit_Tff_terminal_type_expression_LeftParenthesisKeyword_1_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Tff_terminating_expression_LeftParenthesisKeyword_1_0_a.equals(syntax))
				emit_Tff_terminating_expression_LeftParenthesisKeyword_1_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Tff_terminating_expression_LeftParenthesisKeyword_1_0_p.equals(syntax))
				emit_Tff_terminating_expression_LeftParenthesisKeyword_1_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Thf_formula_type_definition_LeftParenthesisKeyword_0_0_a.equals(syntax))
				emit_Thf_formula_type_definition_LeftParenthesisKeyword_0_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Thf_terminal_type_expression_LeftParenthesisKeyword_1_0_a.equals(syntax))
				emit_Thf_terminal_type_expression_LeftParenthesisKeyword_1_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Thf_terminal_type_expression_LeftParenthesisKeyword_1_0_p.equals(syntax))
				emit_Thf_terminal_type_expression_LeftParenthesisKeyword_1_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Thf_terminating_expression_LeftParenthesisKeyword_1_0_a.equals(syntax))
				emit_Thf_terminating_expression_LeftParenthesisKeyword_1_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Thf_terminating_expression_LeftParenthesisKeyword_1_0_p.equals(syntax))
				emit_Thf_terminating_expression_LeftParenthesisKeyword_1_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) fof_atom=Fof_atom
	 *     (rule start) (ambiguity) fof_exp=Fof_quantifier_expression
	 *     (rule start) (ambiguity) fof_negation?='~'
	 *     (rule start) (ambiguity) {binary.left=}
	 */
	protected void emit_Fof_terminating_expression_LeftParenthesisKeyword_1_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) {binary.left=}
	 */
	protected void emit_Fof_terminating_expression_LeftParenthesisKeyword_1_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=Lower_token_and_keyword
	 *     (rule start) (ambiguity) name=STRING
	 */
	protected void emit_Tff_formula_type_definition_LeftParenthesisKeyword_0_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name='$i'
	 *     (rule start) (ambiguity) name='$int'
	 *     (rule start) (ambiguity) name='$o'
	 *     (rule start) (ambiguity) name='$rat'
	 *     (rule start) (ambiguity) name='$real'
	 *     (rule start) (ambiguity) name='$tType'
	 *     (rule start) (ambiguity) name=Lower_token_and_keyword
	 *     (rule start) (ambiguity) name=STRING
	 *     (rule start) (ambiguity) name=UPPER_TOKEN
	 *     (rule start) (ambiguity) {oper.left=}
	 */
	protected void emit_Tff_terminal_type_expression_LeftParenthesisKeyword_1_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) {oper.left=}
	 */
	protected void emit_Tff_terminal_type_expression_LeftParenthesisKeyword_1_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) atom=Tff_atom
	 *     (rule start) (ambiguity) exp=Tff_quantifier_expression
	 *     (rule start) (ambiguity) negation?='~'
	 *     (rule start) (ambiguity) {binary.left=}
	 */
	protected void emit_Tff_terminating_expression_LeftParenthesisKeyword_1_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) {binary.left=}
	 */
	protected void emit_Tff_terminating_expression_LeftParenthesisKeyword_1_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=Lower_token_and_keyword
	 *     (rule start) (ambiguity) name=STRING
	 */
	protected void emit_Thf_formula_type_definition_LeftParenthesisKeyword_0_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name='$i'
	 *     (rule start) (ambiguity) name='$o'
	 *     (rule start) (ambiguity) name='$tType'
	 *     (rule start) (ambiguity) name=Lower_token_and_keyword
	 *     (rule start) (ambiguity) name=STRING
	 *     (rule start) (ambiguity) {oper.left=}
	 */
	protected void emit_Thf_terminal_type_expression_LeftParenthesisKeyword_1_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) {oper.left=}
	 */
	protected void emit_Thf_terminal_type_expression_LeftParenthesisKeyword_1_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) op=Thf_unary_operator
	 *     (rule start) (ambiguity) thf_atom=Thf_atom
	 *     (rule start) (ambiguity) thf_exp=Thf_quantifier_expression
	 *     (rule start) (ambiguity) thf_negation?='~'
	 *     (rule start) (ambiguity) {binary.left=}
	 */
	protected void emit_Thf_terminating_expression_LeftParenthesisKeyword_1_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) {binary.left=}
	 */
	protected void emit_Thf_terminating_expression_LeftParenthesisKeyword_1_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
