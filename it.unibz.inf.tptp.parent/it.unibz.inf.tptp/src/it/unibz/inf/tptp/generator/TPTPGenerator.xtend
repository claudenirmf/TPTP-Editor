/*
 * generated by Xtext 2.12.0
 */
package it.unibz.inf.tptp.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import java.io.OutputStream
import java.io.BufferedOutputStream
import java.io.PrintWriter
import com.google.inject.Inject
import org.eclipse.xtext.resource.XtextResourceSet
import java.io.File
import org.eclipse.emf.common.util.URI
import org.eclipse.xtext.EcoreUtil2
import java.util.LinkedList
import java.nio.file.Files
import java.util.Scanner
import java.io.FileReader
import java.io.BufferedReader
import org.eclipse.core.runtime.URIUtil
import org.eclipse.core.resources.ResourcesPlugin
import org.eclipse.emf.common.CommonPlugin
import org.eclipse.core.runtime.Path
import it.unibz.inf.tptp.parser.Model
import it.unibz.inf.tptp.parser.Include

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class TPTPGenerator extends AbstractGenerator {
    
    @Inject XtextResourceSet xrs
    
    static val URIPrefix = 'platform:/resource/'

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
        // The following piece of code requires the dependency 'org.eclipse.core.resources'
        // This piece of code works only within Eclipse and it is unsuitable for standalone apps
        val resolvedFile = CommonPlugin.resolve(resource.URI)
        val resourceFile = ResourcesPlugin.workspace.root
                .getFile(new Path(resolvedFile.toFileString)).fullPath.toFile
	    val parentFolder = resourceFile.parentFile
        val files = new LinkedList<File>
	    
	    if(resource.contents.empty)    return ;
	    
	    files.add(resourceFile)
        (resource.contents.head as Model).TPTP_input.forEach[
                if(it instanceof Include)
                    files.add(new File(parentFolder.canonicalPath+File.separator+it.path))                    
            ]
	    
        val output = new StringBuilder
        files.forEach[ file |
                if(!file.exists || file.directory)    return;

                val reader = new Scanner(file)
                
                output.append('% Statements from file '+file.name+'\n')
                output.append('% ------------------------------------------\n\n')
                while(reader.hasNextLine)  
                    output.append(reader.nextLine+'\n')
                output.append('\n')
                
                reader.close
            ]
        
        fsa.generateFile(resourceFile.name.substring(0,resourceFile.name.length-2)+'.txt', output)
    	}
}
