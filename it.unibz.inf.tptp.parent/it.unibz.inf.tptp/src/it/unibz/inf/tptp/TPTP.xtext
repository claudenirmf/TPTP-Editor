grammar it.unibz.inf.tptp.TPTP with org.eclipse.xtext.common.Terminals

generate parser "http://www.unibz.it/inf/tptp/TPTP"

//grammar com.theoremsandstuff.tptp.Parser hidden(WS, ML_COMMENT, SL_COMMENT)
//
//import "http://www.eclipse.org/emf/2002/Ecore" as ecore
//generate parser "http://www.theoremsandstuff.com/tptp/Parser"
//generate parser "http://www.unibz.it/inf/"

Model:
	TPTP_input+=Include*
	(TPTP_input+=Fof_input* | 
	TPTP_input+=Tff_input* |
	TPTP_input+=Cnf_input* |
	TPTP_input+=Thf_input*
	);

Include:
	'include' '(' path=STRING ')' '.';

Fof_input:
	Fof_root | Include;

Fof_root:
	'fof' '(' 
	   name=(Lower_token_and_keyword | STRING)
	   ',' formula_role=('axiom' | 'hypothesis' | 'negated_conjecture' 
	                    | 'conjecture' | 'definition' | 'lemma' )
	   ',' exp=Fof_expression
	')' '.';

Fof_expression:
	Fof_terminating_expression (
	    {binary.left=current} op=Binary_operator right=Fof_terminating_expression
	)*
;

Fof_terminating_expression returns Fof_expression:
	fof_atom=Fof_atom |
	'(' Fof_expression ')' |
	fof_negation?='~' fof_exp = Fof_expression | //TODO: fix nesting expression problem
	fof_exp=Fof_quantifier_expression;

Fof_atom:
	Fof_constant |
	Fof_var |
	Fof_atom_literal;

Fof_atom_literal returns Fof_constant:
	name=('$true' | '$false')
	;

Fof_constant:
	name=(Lower_token_and_keyword | STRING) 
	('(' fof_param+=Fof_atom (',' fof_param+=Fof_atom)* ')')?;

Fof_var:
	name=UPPER_TOKEN;
	
Fof_quantifier_expression returns Fof_expression:
	fof_quantifier=('!' // for all
        | '?' //there exists
) '[' fof_param=Fof_variable_list ']' ':' fof_exp=Fof_expression;

Fof_variable_list:
	params+=Fof_var (',' params+=Fof_var)*;

////////////////////////////////////////////////////////////////////////////
// TFF


Tff_input:
    Tff_root | Include;

Tff_root:
    ('tff' '(' name=(Lower_token_and_keyword | STRING)
    ',' formula_role=('axiom' | 'hypothesis' | 'negated_conjecture' | 'conjecture' | 'definition' | 'lemma')
    ',' exp=Tff_expression
    ')' '.')
    |
    ('tff' '(' name=(Lower_token_and_keyword | STRING)
    ',' formula_role=('type')
    ',' def=Tff_formula_type_definition
    ')' '.');

Tff_formula_type_definition:
        '(' Tff_formula_type_definition ')' |
        ((name=Lower_token_and_keyword | name=STRING) ':' exp=(Tff_type_quantifier_epression | Tff_type_expression));

        //these operators are left associative, as god intended
//TODO: should we AST modle these as Tff_type_constant with 2 params?
Tff_type_expression:
        Tff_terminal_type_expression ({oper.left=current} op=('>' | '*') right+=Tff_terminal_type_expression)*;

Tff_terminal_type_expression returns Tff_type_expression:
        Tff_type_atom | '(' Tff_type_expression ')';

Tff_type_atom:
        Tff_type_constant |
        Tff_var |
        Tff_type_literal;

Tff_type_constant:
        name=(Lower_token_and_keyword | STRING) ('(' param+=Tff_type_atom (',' param+=Tff_type_atom)* ')')?;

//TODO: don't support edgecase:
//tff(sorted_type,type,(
//    sorted: "$i" )).

Tff_type_literal returns Tff_type_constant:
        name=('$i' | '$o' | '$tType' | '$int' | '$real' | '$rat');

Tff_expression:
        Tff_terminating_expression ({binary.left=current} op=Binary_operator right=Tff_terminating_expression)*;

Tff_terminating_expression returns Tff_expression:
        atom=Tff_atom |
        '(' Tff_expression ')' |
        negation?='~' exp=Tff_expression |
        exp=Tff_quantifier_expression;

Tff_atom:
        Tff_var |
        Tff_atom_literal |
        Tff_constant |
        Tff_predefined_function_1_args |
        Tff_predefined_function_2_args;

Tff_constant:
        (name=(Lower_token_and_keyword | STRING) ('(' param+=Tff_atom (',' param+=Tff_atom)* ')')?)
        | (top=(Lower_token_and_keyword) name='/' bottom=(Lower_token_and_keyword)) //TODO: what is the best way to represent these horrible fraction types
;

Tff_atom_literal returns Tff_constant:
        name=('$true' |
        '$false');

Tff_predefined_function_1_args returns Tff_constant:
        name=('$is_int' | '$is_rat' //ANYTHING -> BOOL
        | '$uminus' // NUM -> NUM ?
        | '$to_int' //ANYTHING? -> INT
        | '$to_rat' //ANYTHING? -> RAT
        | '$to_real' //ANYTHING? -> REAL
)
        '(' param+=Tff_expression ')';

        //TODO: make this returns Tff_constant:
//TODO: change func to name
//TODO: possibly file a bug
Tff_predefined_function_2_args: //; returns Tff_constant:
        func=('$less' | '$sum' | '$difference' | '$product' | '$quotient' | '$quotient_e' | '$quotient_t' | '$quotient_f' |
        '$remainder_e' | '$remainder_t' | '$remainder_f' | '$greatereq' | '$lesseq' | '$greater' | '$eq'
        //also $distinct
) '(' param+=Tff_expression ',' param+=Tff_expression ')';

Tff_var:
        name=UPPER_TOKEN;

Tff_var_declaration:
        var=Tff_var ':' vartype=Tff_type_expression;

Tff_quantifier_expression returns Tff_expression:
        quantifier=('!' // for all
        | '?' //there exists
) '[' param=Tff_variable_list ']' ':' exp=Tff_expression;

Tff_type_quantifier_epression returns Tff_expression:
        quantifier=('!>' //????
) '[' param=Tff_variable_list ']' ':' exp=Tff_type_expression; //TODO: the syntax colisions here are insane! what does ":" mean?

Tff_variable_list:
        params+=Tff_var_declaration (',' params+=Tff_var_declaration)*;

//////////////////////////////////////////////////////////////////////////////////
// CNF

Cnf_input:
        Cnf_root | Include;

Cnf_root:
        'cnf' '(' name=(Lower_token_and_keyword | STRING)
        ',' formula_role=('axiom'|'hypothesis'|'negated_conjecture' | 
        'plain'//TODO: check if this has been depricated
        )
        ',' exp=Cnf_formula_type_definition 
        ')' '.'
;

Cnf_formula_type_definition:
        '(' disjunction=Cnf_or ')' |
        disjunction=Cnf_or;

Cnf_or:
        or+=Cnf_not ('|' or+=Cnf_not)*
;

Cnf_not:
        (negated?='~')? literal=Cnf_equality; //TODO: cange nagated to something that is true when the formula is true and false otherwise

//TODO: merge down
Cnf_equality: expL=Cnf_expression (eq=('='|'!=') expR=Cnf_expression )?;

//TODO: file bug report:
//cnf_not:
//        ('~')? (cnf_exp | cnf_equality);
//
//cnf_equality: cnf_exp '=' cnf_exp;

Cnf_expression: Cnf_constant | Cnf_var | cnf_exp=Cnf_statement_literal;

Cnf_constant:
        name=(Lower_token_and_keyword | STRING) ('('param+=Cnf_expression(','param+=Cnf_expression)*')')?
;
Cnf_var:
        name=UPPER_TOKEN
;
//TODO: tooltip doc
//TODO: make more DRY
Cnf_statement_literal:
	'$true'|'$false';



//TODO: compile time type checking would be super cool

//TODO: should only be able to import file of the same language
//TODO: import magic

/////////////////////////////////////////////////////////////////////////
// THF



Thf_input:
        Thf_root | Include;

Thf_root:
        'thf' '(' name=(Lower_token_and_keyword | STRING)
        ',' formula_role='type'
        ',' def=Thf_formula_type_definition
        ')' '.'
        |
        'thf' '(' name=(Lower_token_and_keyword | STRING)
        ',' formula_role=('axiom' | 'hypothesis' | 'negated_conjecture' | 'conjecture' | 'definition' | 'lemma') 
        ',' thf_exp=Thf_expression 
        ')' '.'
        ;


Thf_formula_type_definition:
        '(' Thf_formula_type_definition ')' |
        (name=(Lower_token_and_keyword | STRING) ':' exp=(//thf_type_quantifier_epression| 
        	Thf_type_expression
        ));

        //these operators are left associative, as god intended
//TODO: should we AST modle these as Tff_type_constant with 2 params?
Thf_type_expression:
        Thf_terminal_type_expression ({oper.left=current} op=('>') right+=Thf_terminal_type_expression)*;


Thf_terminal_type_expression returns Thf_type_expression:
       Thf_type_atom
         | '(' Thf_type_expression ')';


Thf_type_atom:
        Thf_type_constant |
//        thf_var |
        Thf_type_literal;

Thf_type_constant:
        name=(Lower_token_and_keyword | STRING) ;//('(' param+=tff_type_atom (',' param+=tff_type_atom)* ')')?;

Thf_type_literal returns Thf_type_constant:
        name=('$i' | '$o' | '$tType'); //type=[thf_formula_type_definition]
        
Thf_expression:
        Thf_terminating_expression ({binary.left=current} op=Thf_binary_operator right=Thf_terminating_expression)*;

Thf_terminating_expression returns Thf_expression:
        thf_atom=Thf_atom |
        '(' Thf_expression ')' |
        thf_negation?='~' thf_exp=Thf_expression |
        op=Thf_unary_operator  thf_exp=Thf_expression |
        thf_exp=Thf_quantifier_expression;

//I don't know what the fuck any of these do
Thf_unary_operator:
	'@' | '??' | '!!' | '&' |'|' | '=>'
;

Thf_binary_operator:
        '&' | '=>' | '|'
                |'@'// (denoting apply) is left-associative and lambda is right-associative. //TODO: deal with asocativity crap
//^ [X] : ^ [Y] : f @ g (where f is a <thf_apply_formula> and g is a
//<thf_unitary_formula>) should be parsed as: (^ [X] : (^ [Y] : f)) @ g.
//That is, g is not in the scope of either lambda.
|'='//TODO: how is this actualy defined?
|'!='
|'<='
|'<=>'
|'<~>'
;

Thf_atom:
	Thf_constant |
	Thf_var |
	Thf_atom_literal;


Thf_atom_literal returns Thf_constant:
	name=('$true' |
	'$false')
	;

Thf_constant:
	name=(Lower_token_and_keyword | STRING) ('(' thf_param+=Thf_atom (',' thf_param+=Thf_atom)* ')')?;

Thf_var:
	name=UPPER_TOKEN;
	
Thf_quantifier_expression returns Tff_expression:
        quantifier=('!' // for all
        | '?' //there exists
        | '^'
) '[' param=Thf_variable_list ']' ':' exp=Thf_expression;
	
	
Thf_variable_list:
        params+=Thf_var_declaration (',' params+=Thf_var_declaration)*;
        
        
Thf_var_declaration:
        var=Thf_var ':' vartype=Thf_type_expression;
        
 //
//thf_type_statement: type=thf_type |'('thf_type_statement')';// | left=thf_type_statement '>' right=thf_type_statement;
//



////////////////////////////////////////////////////////////////////////////
// shared
Binary_operator:
	'!=' | '=' | '|' | '&' | '=>' | '<=>' | '<=' | '<~>' | '~|' | '~&'
	//The binary connectives are infix | for disjunction, 
	//infix & for conjunction, infix <=> for equivalence, 
	//infix => for implication, infix <= for reverse implication, 
	//infix <~> for non-equivalence (XOR), infix ~| for negated disjunction (NOR), 
	//infix ~& for negated conjunction (NAND), infix @ for application.
;

Lower_token_and_keyword:
	//this repitition is for autocomplete
	'axiom' | 'hypothesis' | 'negated_conjecture' | 'conjecture' | 'definition' | 'lemma'
	|'type'
	| 'plain'
	 | LOWER_TOKEN
;
//
//role:
//	'axiom' | 'hypothesis' | 'negated_conjecture' | 'conjecture' | 'definition' | 'lemma'
//	//'axiom'|'hypothesis'|'negated_conjecture' cnf/thf only?
//;

terminal LOWER_TOKEN:
        ('a'..'z' | '_' | '-' | '.' | '0'..'9') ('a'..'z' | 'A'..'Z' | '_' | '-' | '.' | '0'..'9')*;

terminal UPPER_TOKEN:
        ('A'..'Z') ('a'..'z' | 'A'..'Z' | '_' | '-' | '.' | '0'..'9')*;

@Override 
terminal STRING:
        '"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"' |
        "'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | "'"))* "'";

@Override 
terminal ML_COMMENT:
        '/*'->'*/';

@Override 
terminal SL_COMMENT:
        '%' !('\n' | '\r')* ('\r'? '\n')?;

@Override 
terminal WS:
        (' ' | '\t' | '\r' | '\n')+;