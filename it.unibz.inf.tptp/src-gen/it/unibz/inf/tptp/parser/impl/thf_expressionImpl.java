/**
 * generated by Xtext 2.12.0
 */
package it.unibz.inf.tptp.parser.impl;

import it.unibz.inf.tptp.parser.ParserPackage;
import it.unibz.inf.tptp.parser.thf_atom;
import it.unibz.inf.tptp.parser.thf_expression;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>thf expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link it.unibz.inf.tptp.parser.impl.thf_expressionImpl#getThf_atom <em>Thf atom</em>}</li>
 *   <li>{@link it.unibz.inf.tptp.parser.impl.thf_expressionImpl#isThf_negation <em>Thf negation</em>}</li>
 *   <li>{@link it.unibz.inf.tptp.parser.impl.thf_expressionImpl#getThf_exp <em>Thf exp</em>}</li>
 *   <li>{@link it.unibz.inf.tptp.parser.impl.thf_expressionImpl#getOp <em>Op</em>}</li>
 * </ul>
 *
 * @generated
 */
public class thf_expressionImpl extends MinimalEObjectImpl.Container implements thf_expression
{
  /**
   * The cached value of the '{@link #getThf_atom() <em>Thf atom</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getThf_atom()
   * @generated
   * @ordered
   */
  protected thf_atom thf_atom;

  /**
   * The default value of the '{@link #isThf_negation() <em>Thf negation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isThf_negation()
   * @generated
   * @ordered
   */
  protected static final boolean THF_NEGATION_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isThf_negation() <em>Thf negation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isThf_negation()
   * @generated
   * @ordered
   */
  protected boolean thf_negation = THF_NEGATION_EDEFAULT;

  /**
   * The cached value of the '{@link #getThf_exp() <em>Thf exp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getThf_exp()
   * @generated
   * @ordered
   */
  protected EObject thf_exp;

  /**
   * The default value of the '{@link #getOp() <em>Op</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOp()
   * @generated
   * @ordered
   */
  protected static final String OP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOp() <em>Op</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOp()
   * @generated
   * @ordered
   */
  protected String op = OP_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected thf_expressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ParserPackage.Literals.THF_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public thf_atom getThf_atom()
  {
    return thf_atom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetThf_atom(thf_atom newThf_atom, NotificationChain msgs)
  {
    thf_atom oldThf_atom = thf_atom;
    thf_atom = newThf_atom;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ParserPackage.THF_EXPRESSION__THF_ATOM, oldThf_atom, newThf_atom);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setThf_atom(thf_atom newThf_atom)
  {
    if (newThf_atom != thf_atom)
    {
      NotificationChain msgs = null;
      if (thf_atom != null)
        msgs = ((InternalEObject)thf_atom).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ParserPackage.THF_EXPRESSION__THF_ATOM, null, msgs);
      if (newThf_atom != null)
        msgs = ((InternalEObject)newThf_atom).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ParserPackage.THF_EXPRESSION__THF_ATOM, null, msgs);
      msgs = basicSetThf_atom(newThf_atom, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ParserPackage.THF_EXPRESSION__THF_ATOM, newThf_atom, newThf_atom));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isThf_negation()
  {
    return thf_negation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setThf_negation(boolean newThf_negation)
  {
    boolean oldThf_negation = thf_negation;
    thf_negation = newThf_negation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ParserPackage.THF_EXPRESSION__THF_NEGATION, oldThf_negation, thf_negation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EObject getThf_exp()
  {
    return thf_exp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetThf_exp(EObject newThf_exp, NotificationChain msgs)
  {
    EObject oldThf_exp = thf_exp;
    thf_exp = newThf_exp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ParserPackage.THF_EXPRESSION__THF_EXP, oldThf_exp, newThf_exp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setThf_exp(EObject newThf_exp)
  {
    if (newThf_exp != thf_exp)
    {
      NotificationChain msgs = null;
      if (thf_exp != null)
        msgs = ((InternalEObject)thf_exp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ParserPackage.THF_EXPRESSION__THF_EXP, null, msgs);
      if (newThf_exp != null)
        msgs = ((InternalEObject)newThf_exp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ParserPackage.THF_EXPRESSION__THF_EXP, null, msgs);
      msgs = basicSetThf_exp(newThf_exp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ParserPackage.THF_EXPRESSION__THF_EXP, newThf_exp, newThf_exp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getOp()
  {
    return op;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOp(String newOp)
  {
    String oldOp = op;
    op = newOp;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ParserPackage.THF_EXPRESSION__OP, oldOp, op));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ParserPackage.THF_EXPRESSION__THF_ATOM:
        return basicSetThf_atom(null, msgs);
      case ParserPackage.THF_EXPRESSION__THF_EXP:
        return basicSetThf_exp(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ParserPackage.THF_EXPRESSION__THF_ATOM:
        return getThf_atom();
      case ParserPackage.THF_EXPRESSION__THF_NEGATION:
        return isThf_negation();
      case ParserPackage.THF_EXPRESSION__THF_EXP:
        return getThf_exp();
      case ParserPackage.THF_EXPRESSION__OP:
        return getOp();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ParserPackage.THF_EXPRESSION__THF_ATOM:
        setThf_atom((thf_atom)newValue);
        return;
      case ParserPackage.THF_EXPRESSION__THF_NEGATION:
        setThf_negation((Boolean)newValue);
        return;
      case ParserPackage.THF_EXPRESSION__THF_EXP:
        setThf_exp((EObject)newValue);
        return;
      case ParserPackage.THF_EXPRESSION__OP:
        setOp((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ParserPackage.THF_EXPRESSION__THF_ATOM:
        setThf_atom((thf_atom)null);
        return;
      case ParserPackage.THF_EXPRESSION__THF_NEGATION:
        setThf_negation(THF_NEGATION_EDEFAULT);
        return;
      case ParserPackage.THF_EXPRESSION__THF_EXP:
        setThf_exp((EObject)null);
        return;
      case ParserPackage.THF_EXPRESSION__OP:
        setOp(OP_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ParserPackage.THF_EXPRESSION__THF_ATOM:
        return thf_atom != null;
      case ParserPackage.THF_EXPRESSION__THF_NEGATION:
        return thf_negation != THF_NEGATION_EDEFAULT;
      case ParserPackage.THF_EXPRESSION__THF_EXP:
        return thf_exp != null;
      case ParserPackage.THF_EXPRESSION__OP:
        return OP_EDEFAULT == null ? op != null : !OP_EDEFAULT.equals(op);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (thf_negation: ");
    result.append(thf_negation);
    result.append(", op: ");
    result.append(op);
    result.append(')');
    return result.toString();
  }

} //thf_expressionImpl
