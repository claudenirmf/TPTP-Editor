/**
 * generated by Xtext 2.12.0
 */
package it.unibz.inf.tptp.parser.util;

import it.unibz.inf.tptp.parser.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see it.unibz.inf.tptp.parser.ParserPackage
 * @generated
 */
public class ParserSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static ParserPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ParserSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = ParserPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case ParserPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.INCLUDE:
      {
        include include = (include)theEObject;
        T result = caseinclude(include);
        if (result == null) result = casefof_input(include);
        if (result == null) result = casetff_input(include);
        if (result == null) result = casecnf_input(include);
        if (result == null) result = casethf_input(include);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.FOF_INPUT:
      {
        fof_input fof_input = (fof_input)theEObject;
        T result = casefof_input(fof_input);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.FOF_ROOT:
      {
        fof_root fof_root = (fof_root)theEObject;
        T result = casefof_root(fof_root);
        if (result == null) result = casefof_input(fof_root);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.FOF_EXPRESSION:
      {
        fof_expression fof_expression = (fof_expression)theEObject;
        T result = casefof_expression(fof_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.FOF_ATOM:
      {
        fof_atom fof_atom = (fof_atom)theEObject;
        T result = casefof_atom(fof_atom);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.FOF_CONSTANT:
      {
        fof_constant fof_constant = (fof_constant)theEObject;
        T result = casefof_constant(fof_constant);
        if (result == null) result = casefof_atom(fof_constant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.FOF_VAR:
      {
        fof_var fof_var = (fof_var)theEObject;
        T result = casefof_var(fof_var);
        if (result == null) result = casefof_atom(fof_var);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.FOF_VARIABLE_LIST:
      {
        fof_variable_list fof_variable_list = (fof_variable_list)theEObject;
        T result = casefof_variable_list(fof_variable_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.TFF_INPUT:
      {
        tff_input tff_input = (tff_input)theEObject;
        T result = casetff_input(tff_input);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.TFF_ROOT:
      {
        tff_root tff_root = (tff_root)theEObject;
        T result = casetff_root(tff_root);
        if (result == null) result = casetff_input(tff_root);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.TFF_FORMULA_TYPE_DEFINITION:
      {
        tff_formula_type_definition tff_formula_type_definition = (tff_formula_type_definition)theEObject;
        T result = casetff_formula_type_definition(tff_formula_type_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.TFF_TYPE_EXPRESSION:
      {
        tff_type_expression tff_type_expression = (tff_type_expression)theEObject;
        T result = casetff_type_expression(tff_type_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.TFF_TYPE_ATOM:
      {
        tff_type_atom tff_type_atom = (tff_type_atom)theEObject;
        T result = casetff_type_atom(tff_type_atom);
        if (result == null) result = casetff_type_expression(tff_type_atom);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.TFF_TYPE_CONSTANT:
      {
        tff_type_constant tff_type_constant = (tff_type_constant)theEObject;
        T result = casetff_type_constant(tff_type_constant);
        if (result == null) result = casetff_type_atom(tff_type_constant);
        if (result == null) result = casetff_type_expression(tff_type_constant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.TFF_EXPRESSION:
      {
        tff_expression tff_expression = (tff_expression)theEObject;
        T result = casetff_expression(tff_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.TFF_ATOM:
      {
        tff_atom tff_atom = (tff_atom)theEObject;
        T result = casetff_atom(tff_atom);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.TFF_CONSTANT:
      {
        tff_constant tff_constant = (tff_constant)theEObject;
        T result = casetff_constant(tff_constant);
        if (result == null) result = casetff_atom(tff_constant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.TFF_PREDEFINED_FUNCTION_2ARGS:
      {
        tff_predefined_function_2_args tff_predefined_function_2_args = (tff_predefined_function_2_args)theEObject;
        T result = casetff_predefined_function_2_args(tff_predefined_function_2_args);
        if (result == null) result = casetff_atom(tff_predefined_function_2_args);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.TFF_VAR:
      {
        tff_var tff_var = (tff_var)theEObject;
        T result = casetff_var(tff_var);
        if (result == null) result = casetff_type_atom(tff_var);
        if (result == null) result = casetff_atom(tff_var);
        if (result == null) result = casetff_type_expression(tff_var);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.TFF_VAR_DECLARATION:
      {
        tff_var_declaration tff_var_declaration = (tff_var_declaration)theEObject;
        T result = casetff_var_declaration(tff_var_declaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.TFF_VARIABLE_LIST:
      {
        tff_variable_list tff_variable_list = (tff_variable_list)theEObject;
        T result = casetff_variable_list(tff_variable_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.CNF_INPUT:
      {
        cnf_input cnf_input = (cnf_input)theEObject;
        T result = casecnf_input(cnf_input);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.CNF_ROOT:
      {
        cnf_root cnf_root = (cnf_root)theEObject;
        T result = casecnf_root(cnf_root);
        if (result == null) result = casecnf_input(cnf_root);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.CNF_FORMULA_TYPE_DEFINITION:
      {
        cnf_formula_type_definition cnf_formula_type_definition = (cnf_formula_type_definition)theEObject;
        T result = casecnf_formula_type_definition(cnf_formula_type_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.CNF_OR:
      {
        cnf_or cnf_or = (cnf_or)theEObject;
        T result = casecnf_or(cnf_or);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.CNF_NOT:
      {
        cnf_not cnf_not = (cnf_not)theEObject;
        T result = casecnf_not(cnf_not);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.CNF_EQUALITY:
      {
        cnf_equality cnf_equality = (cnf_equality)theEObject;
        T result = casecnf_equality(cnf_equality);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.CNF_EXPRESSION:
      {
        cnf_expression cnf_expression = (cnf_expression)theEObject;
        T result = casecnf_expression(cnf_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.CNF_CONSTANT:
      {
        cnf_constant cnf_constant = (cnf_constant)theEObject;
        T result = casecnf_constant(cnf_constant);
        if (result == null) result = casecnf_expression(cnf_constant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.CNF_VAR:
      {
        cnf_var cnf_var = (cnf_var)theEObject;
        T result = casecnf_var(cnf_var);
        if (result == null) result = casecnf_expression(cnf_var);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.THF_INPUT:
      {
        thf_input thf_input = (thf_input)theEObject;
        T result = casethf_input(thf_input);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.THF_ROOT:
      {
        thf_root thf_root = (thf_root)theEObject;
        T result = casethf_root(thf_root);
        if (result == null) result = casethf_input(thf_root);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.THF_FORMULA_TYPE_DEFINITION:
      {
        thf_formula_type_definition thf_formula_type_definition = (thf_formula_type_definition)theEObject;
        T result = casethf_formula_type_definition(thf_formula_type_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.THF_TYPE_EXPRESSION:
      {
        thf_type_expression thf_type_expression = (thf_type_expression)theEObject;
        T result = casethf_type_expression(thf_type_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.THF_TYPE_ATOM:
      {
        thf_type_atom thf_type_atom = (thf_type_atom)theEObject;
        T result = casethf_type_atom(thf_type_atom);
        if (result == null) result = casethf_type_expression(thf_type_atom);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.THF_TYPE_CONSTANT:
      {
        thf_type_constant thf_type_constant = (thf_type_constant)theEObject;
        T result = casethf_type_constant(thf_type_constant);
        if (result == null) result = casethf_type_atom(thf_type_constant);
        if (result == null) result = casethf_type_expression(thf_type_constant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.THF_EXPRESSION:
      {
        thf_expression thf_expression = (thf_expression)theEObject;
        T result = casethf_expression(thf_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.THF_ATOM:
      {
        thf_atom thf_atom = (thf_atom)theEObject;
        T result = casethf_atom(thf_atom);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.THF_CONSTANT:
      {
        thf_constant thf_constant = (thf_constant)theEObject;
        T result = casethf_constant(thf_constant);
        if (result == null) result = casethf_atom(thf_constant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.THF_VAR:
      {
        thf_var thf_var = (thf_var)theEObject;
        T result = casethf_var(thf_var);
        if (result == null) result = casethf_atom(thf_var);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.THF_VARIABLE_LIST:
      {
        thf_variable_list thf_variable_list = (thf_variable_list)theEObject;
        T result = casethf_variable_list(thf_variable_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.THF_VAR_DECLARATION:
      {
        thf_var_declaration thf_var_declaration = (thf_var_declaration)theEObject;
        T result = casethf_var_declaration(thf_var_declaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.BINARY:
      {
        binary binary = (binary)theEObject;
        T result = casebinary(binary);
        if (result == null) result = casefof_expression(binary);
        if (result == null) result = casetff_expression(binary);
        if (result == null) result = casethf_expression(binary);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ParserPackage.OPER:
      {
        oper oper = (oper)theEObject;
        T result = caseoper(oper);
        if (result == null) result = casetff_type_expression(oper);
        if (result == null) result = casethf_type_expression(oper);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>include</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>include</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseinclude(include object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>fof input</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>fof input</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefof_input(fof_input object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>fof root</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>fof root</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefof_root(fof_root object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>fof expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>fof expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefof_expression(fof_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>fof atom</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>fof atom</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefof_atom(fof_atom object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>fof constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>fof constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefof_constant(fof_constant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>fof var</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>fof var</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefof_var(fof_var object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>fof variable list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>fof variable list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefof_variable_list(fof_variable_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>tff input</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>tff input</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetff_input(tff_input object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>tff root</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>tff root</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetff_root(tff_root object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>tff formula type definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>tff formula type definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetff_formula_type_definition(tff_formula_type_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>tff type expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>tff type expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetff_type_expression(tff_type_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>tff type atom</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>tff type atom</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetff_type_atom(tff_type_atom object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>tff type constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>tff type constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetff_type_constant(tff_type_constant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>tff expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>tff expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetff_expression(tff_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>tff atom</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>tff atom</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetff_atom(tff_atom object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>tff constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>tff constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetff_constant(tff_constant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>tff predefined function 2args</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>tff predefined function 2args</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetff_predefined_function_2_args(tff_predefined_function_2_args object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>tff var</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>tff var</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetff_var(tff_var object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>tff var declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>tff var declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetff_var_declaration(tff_var_declaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>tff variable list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>tff variable list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetff_variable_list(tff_variable_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>cnf input</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>cnf input</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecnf_input(cnf_input object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>cnf root</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>cnf root</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecnf_root(cnf_root object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>cnf formula type definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>cnf formula type definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecnf_formula_type_definition(cnf_formula_type_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>cnf or</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>cnf or</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecnf_or(cnf_or object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>cnf not</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>cnf not</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecnf_not(cnf_not object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>cnf equality</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>cnf equality</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecnf_equality(cnf_equality object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>cnf expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>cnf expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecnf_expression(cnf_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>cnf constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>cnf constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecnf_constant(cnf_constant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>cnf var</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>cnf var</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecnf_var(cnf_var object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>thf input</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>thf input</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casethf_input(thf_input object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>thf root</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>thf root</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casethf_root(thf_root object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>thf formula type definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>thf formula type definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casethf_formula_type_definition(thf_formula_type_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>thf type expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>thf type expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casethf_type_expression(thf_type_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>thf type atom</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>thf type atom</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casethf_type_atom(thf_type_atom object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>thf type constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>thf type constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casethf_type_constant(thf_type_constant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>thf expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>thf expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casethf_expression(thf_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>thf atom</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>thf atom</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casethf_atom(thf_atom object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>thf constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>thf constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casethf_constant(thf_constant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>thf var</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>thf var</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casethf_var(thf_var object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>thf variable list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>thf variable list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casethf_variable_list(thf_variable_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>thf var declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>thf var declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casethf_var_declaration(thf_var_declaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>binary</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>binary</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casebinary(binary object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>oper</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>oper</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseoper(oper object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //ParserSwitch
